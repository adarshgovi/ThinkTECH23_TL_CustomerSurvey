0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1034 (Dec 12 2012) (MSVC)
0000              4   ; This file was generated Fri Oct 18 13:22:40 2013
0000              5   ;--------------------------------------------------------
                  5   $name DE2_Boot
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _Write_XRAM_PARM_2
0000             27            public _Out_Byte_Flash_PARM_2
0000             28            public _seven_seg
0000             29            public _hexval
0000             30            public _counter_prog
0000             31            public _dummy_switch
0000             32            public _main
0000             33            public _Manual_Load
0000             34            public _read_hex_in
0000             35            public _OutWord
0000             36            public _OutByte
0000             37            public _str2hex
0000             38            public _loadintelhex
0000             39            public _Load_Ram_Fast
0000             40            public _FlashByte
0000             41            public _Read_XRAM
0000             42            public _Write_XRAM
0000             43            public _EraseSector
0000             44            public _In_Byte_Flash
0000             45            public _Out_Byte_Flash
0000             46            public _getbyte
0000             47            public _chartohex
0000             48            public _sends
0000             49            public _getchare
0000             50            public _inituart
0000             51            public _de2_8052_crt0
0000             52            public _getchar_echo
0000             53            public _testbit
0000             54            public _serialmode
0000             55            public _buff
0000             56            public _FlashByte_PARM_2
0000             57            public _putchar
0000             58            public _getchar
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _P0             DATA 0x80
0000             63   _SP             DATA 0x81
0000             64   _DPL            DATA 0x82
0000             65   _DPH            DATA 0x83
0000             66   _PCON           DATA 0x87
0000             67   _TCON           DATA 0x88
0000             68   _TMOD           DATA 0x89
0000             69   _TL0            DATA 0x8a
0000             70   _TL1            DATA 0x8b
0000             71   _TH0            DATA 0x8c
0000             72   _TH1            DATA 0x8d
0000             73   _P1             DATA 0x90
0000             74   _SCON           DATA 0x98
0000             75   _SBUF           DATA 0x99
0000             76   _P2             DATA 0xa0
0000             77   _IE             DATA 0xa8
0000             78   _P3             DATA 0xb0
0000             79   _IP             DATA 0xb8
0000             80   _PSW            DATA 0xd0
0000             81   _ACC            DATA 0xe0
0000             82   _B              DATA 0xf0
0000             83   _T2CON          DATA 0xc8
0000             84   _RCAP2L         DATA 0xca
0000             85   _RCAP2H         DATA 0xcb
0000             86   _TL2            DATA 0xcc
0000             87   _TH2            DATA 0xcd
0000             88   _DPS            DATA 0x86
0000             89   _DPH1           DATA 0x85
0000             90   _DPL1           DATA 0x84
0000             91   _HEX0           DATA 0x91
0000             92   _HEX1           DATA 0x92
0000             93   _HEX2           DATA 0x93
0000             94   _HEX3           DATA 0x94
0000             95   _HEX4           DATA 0x8e
0000             96   _HEX5           DATA 0x8f
0000             97   _HEX6           DATA 0x96
0000             98   _HEX7           DATA 0x97
0000             99   _LEDRA          DATA 0xe8
0000            100   _LEDRB          DATA 0x95
0000            101   _LEDRC          DATA 0x9e
0000            102   _LEDG           DATA 0xf8
0000            103   _SWA            DATA 0xe8
0000            104   _SWB            DATA 0x95
0000            105   _SWC            DATA 0x9e
0000            106   _KEY            DATA 0xf8
0000            107   _P0MOD          DATA 0x9a
0000            108   _P1MOD          DATA 0x9b
0000            109   _P2MOD          DATA 0x9c
0000            110   _P3MOD          DATA 0x9d
0000            111   _LCD_CMD        DATA 0xd8
0000            112   _LCD_DATA       DATA 0xd9
0000            113   _LCD_MOD        DATA 0xda
0000            114   _JCMD           DATA 0xc0
0000            115   _JBUF           DATA 0xc1
0000            116   _JCNT           DATA 0xc2
0000            117   _REP_ADD_L      DATA 0xf1
0000            118   _REP_ADD_H      DATA 0xf2
0000            119   _REP_VALUE      DATA 0xf3
0000            120   _DEBUG_CALL_L   DATA 0xfa
0000            121   _DEBUG_CALL_H   DATA 0xfb
0000            122   _BPC            DATA 0xfc
0000            123   _BPS            DATA 0xfd
0000            124   _BPAL           DATA 0xfe
0000            125   _BPAH           DATA 0xff
0000            126   _LBPAL          DATA 0xfa
0000            127   _LBPAH          DATA 0xfb
0000            128   _XRAMUSEDAS     DATA 0xc3
0000            129   _FLASH_CMD      DATA 0xdb
0000            130   _FLASH_DATA     DATA 0xdc
0000            131   _FLASH_MOD      DATA 0xdd
0000            132   _FLASH_ADD0     DATA 0xe1
0000            133   _FLASH_ADD1     DATA 0xe2
0000            134   _FLASH_ADD2     DATA 0xe3
0000            135   ;--------------------------------------------------------
0000            136   ; special function bits
0000            137   ;--------------------------------------------------------
0000            138   _P0_0           BIT 0x80
0000            139   _P0_1           BIT 0x81
0000            140   _P0_2           BIT 0x82
0000            141   _P0_3           BIT 0x83
0000            142   _P0_4           BIT 0x84
0000            143   _P0_5           BIT 0x85
0000            144   _P0_6           BIT 0x86
0000            145   _P0_7           BIT 0x87
0000            146   _IT0            BIT 0x88
0000            147   _IE0            BIT 0x89
0000            148   _IT1            BIT 0x8a
0000            149   _IE1            BIT 0x8b
0000            150   _TR0            BIT 0x8c
0000            151   _TF0            BIT 0x8d
0000            152   _TR1            BIT 0x8e
0000            153   _TF1            BIT 0x8f
0000            154   _P1_0           BIT 0x90
0000            155   _P1_1           BIT 0x91
0000            156   _P1_2           BIT 0x92
0000            157   _P1_3           BIT 0x93
0000            158   _P1_4           BIT 0x94
0000            159   _P1_5           BIT 0x95
0000            160   _P1_6           BIT 0x96
0000            161   _P1_7           BIT 0x97
0000            162   _RI             BIT 0x98
0000            163   _TI             BIT 0x99
0000            164   _RB8            BIT 0x9a
0000            165   _TB8            BIT 0x9b
0000            166   _REN            BIT 0x9c
0000            167   _SM2            BIT 0x9d
0000            168   _SM1            BIT 0x9e
0000            169   _SM0            BIT 0x9f
0000            170   _P2_0           BIT 0xa0
0000            171   _P2_1           BIT 0xa1
0000            172   _P2_2           BIT 0xa2
0000            173   _P2_3           BIT 0xa3
0000            174   _P2_4           BIT 0xa4
0000            175   _P2_5           BIT 0xa5
0000            176   _P2_6           BIT 0xa6
0000            177   _P2_7           BIT 0xa7
0000            178   _EX0            BIT 0xa8
0000            179   _ET0            BIT 0xa9
0000            180   _EX1            BIT 0xaa
0000            181   _ET1            BIT 0xab
0000            182   _ES             BIT 0xac
0000            183   _ET2            BIT 0xad
0000            184   _EA             BIT 0xaf
0000            185   _P3_0           BIT 0xb0
0000            186   _P3_1           BIT 0xb1
0000            187   _P3_2           BIT 0xb2
0000            188   _P3_3           BIT 0xb3
0000            189   _P3_4           BIT 0xb4
0000            190   _P3_5           BIT 0xb5
0000            191   _P3_6           BIT 0xb6
0000            192   _P3_7           BIT 0xb7
0000            193   _RXD            BIT 0xb0
0000            194   _TXD            BIT 0xb1
0000            195   _INT0           BIT 0xb2
0000            196   _INT1           BIT 0xb3
0000            197   _T0             BIT 0xb4
0000            198   _T1             BIT 0xb5
0000            199   _WR             BIT 0xb6
0000            200   _RD             BIT 0xb7
0000            201   _PX0            BIT 0xb8
0000            202   _PT0            BIT 0xb9
0000            203   _PX1            BIT 0xba
0000            204   _PT1            BIT 0xbb
0000            205   _PS             BIT 0xbc
0000            206   _PT2            BIT 0xbd
0000            207   _P              BIT 0xd0
0000            208   _F1             BIT 0xd1
0000            209   _OV             BIT 0xd2
0000            210   _RS0            BIT 0xd3
0000            211   _RS1            BIT 0xd4
0000            212   _F0             BIT 0xd5
0000            213   _AC             BIT 0xd6
0000            214   _CY             BIT 0xd7
0000            215   _T2CON_0        BIT 0xc8
0000            216   _T2CON_1        BIT 0xc9
0000            217   _T2CON_2        BIT 0xca
0000            218   _T2CON_3        BIT 0xcb
0000            219   _T2CON_4        BIT 0xcc
0000            220   _T2CON_5        BIT 0xcd
0000            221   _T2CON_6        BIT 0xce
0000            222   _T2CON_7        BIT 0xcf
0000            223   _CP_RL2         BIT 0xc8
0000            224   _C_T2           BIT 0xc9
0000            225   _TR2            BIT 0xca
0000            226   _EXEN2          BIT 0xcb
0000            227   _TCLK           BIT 0xcc
0000            228   _RCLK           BIT 0xcd
0000            229   _EXF2           BIT 0xce
0000            230   _TF2            BIT 0xcf
0000            231   _LEDRA_0        BIT 0xe8
0000            232   _LEDRA_1        BIT 0xe9
0000            233   _LEDRA_2        BIT 0xea
0000            234   _LEDRA_3        BIT 0xeb
0000            235   _LEDRA_4        BIT 0xec
0000            236   _LEDRA_5        BIT 0xed
0000            237   _LEDRA_6        BIT 0xee
0000            238   _LEDRA_7        BIT 0xef
0000            239   _SWA_0          BIT 0xe8
0000            240   _SWA_1          BIT 0xe9
0000            241   _SWA_2          BIT 0xea
0000            242   _SWA_3          BIT 0xeb
0000            243   _SWA_4          BIT 0xec
0000            244   _SWA_5          BIT 0xed
0000            245   _SWA_6          BIT 0xee
0000            246   _SWA_7          BIT 0xef
0000            247   _LEDG_0         BIT 0xf8
0000            248   _LEDG_1         BIT 0xf9
0000            249   _LEDG_2         BIT 0xfa
0000            250   _LEDG_3         BIT 0xfb
0000            251   _LEDG_4         BIT 0xfc
0000            252   _LEDG_5         BIT 0xfd
0000            253   _LEDG_6         BIT 0xfe
0000            254   _LEDG_7         BIT 0xff
0000            255   _KEY_1          BIT 0xf9
0000            256   _KEY_2          BIT 0xfa
0000            257   _KEY_3          BIT 0xfb
0000            258   _LCD_RW         BIT 0xd8
0000            259   _LCD_EN         BIT 0xd9
0000            260   _LCD_RS         BIT 0xda
0000            261   _LCD_ON         BIT 0xdb
0000            262   _LCD_BLON       BIT 0xdc
0000            263   _JRXRDY         BIT 0xc0
0000            264   _JTXRDY         BIT 0xc1
0000            265   _JRXEN          BIT 0xc2
0000            266   _JTXEN          BIT 0xc3
0000            267   _JTXFULL        BIT 0xc4
0000            268   _JRXFULL        BIT 0xc5
0000            269   _JTXEMPTY       BIT 0xc6
0000            270   _JTDI           BIT 0xc7
0000            271   ;--------------------------------------------------------
0000            272   ; overlayable register banks
0000            273   ;--------------------------------------------------------
0000            274            rbank0 segment data overlay
0000            275   ;--------------------------------------------------------
0000            276   ; internal ram data
0000            277   ;--------------------------------------------------------
0000            278            rseg R_DSEG
0000            279   _getbyte_j_1_82:
0000            280            ds 1
0001            281   _FlashByte_PARM_2:
0001            282            ds 1
0002            283   _loadintelhex_address_1_98:
0002            284            ds 2
0004            285   _loadintelhex_j_1_98:
0004            286            ds 1
0005            287   _loadintelhex_size_1_98:
0005            288            ds 1
0006            289   _loadintelhex_type_1_98:
0006            290            ds 1
0007            291   _loadintelhex_checksum_1_98:
0007            292            ds 1
0008            293   _loadintelhex_n_1_98:
0008            294            ds 1
0009            295   _loadintelhex_echo_1_98:
0009            296            ds 1
000A            297   _main_i_1_129:
000A            298            ds 2
000C            299   ;--------------------------------------------------------
000C            300   ; overlayable items in internal ram 
000C            301   ;--------------------------------------------------------
0000            302            rseg    R_OSEG
0000            303            rseg    R_OSEG
0000            304            rseg    R_OSEG
0000            305   _Out_Byte_Flash_PARM_2:
0000            306            ds 1
0001            307            rseg    R_OSEG
0001            308            rseg    R_OSEG
0001            309   _Write_XRAM_PARM_2:
0001            310            ds 1
0002            311            rseg    R_OSEG
0002            312            rseg    R_OSEG
0002            313   _str2hex_sloc0_1_0:
0002            314            ds 2
0004            315            rseg    R_OSEG
0004            316   ;--------------------------------------------------------
0004            317   ; indirectly addressable internal ram data
0004            318   ;--------------------------------------------------------
0000            319            rseg R_ISEG
0000            320   _buff:
0000            321            ds 64
0040            322   _main_ascii_1_129:
0040            323            ds 17
0051            324   ;--------------------------------------------------------
0051            325   ; absolute internal ram data
0051            326   ;--------------------------------------------------------
0000            327            DSEG
0000            328   ;--------------------------------------------------------
0000            329   ; bit data
0000            330   ;--------------------------------------------------------
0000            331            rseg R_BSEG
0000            332   _serialmode:
0000            333            DBIT    1
0001            334   _testbit:
0001            335            DBIT    1
0002            336   _getchar_echo:
0002            337            DBIT    1
0003            338   ;--------------------------------------------------------
0003            339   ; paged external ram data
0003            340   ;--------------------------------------------------------
0000            341            rseg R_PSEG
0000            342   ;--------------------------------------------------------
0000            343   ; external ram data
0000            344   ;--------------------------------------------------------
0000            345            rseg R_XSEG
0000            346   ;--------------------------------------------------------
0000            347   ; absolute external ram data
0000            348   ;--------------------------------------------------------
0000            349            XSEG
0000            350   ;--------------------------------------------------------
0000            351   ; external initialized ram data
0000            352   ;--------------------------------------------------------
0000            353            rseg R_IXSEG
0000            354            rseg R_HOME
0000            355            rseg R_GSINIT
0000            356            rseg R_CSEG
0000            357   ;--------------------------------------------------------
0000            358   ; Reset entry point and interrupt vectors
0000            359   ;--------------------------------------------------------
F000            360            CSEG at 0xf000
F000 020100     361            ljmp    _crt0
F003            362   ;--------------------------------------------------------
F003            363   ; global & static initialisations
F003            364   ;--------------------------------------------------------
0000            365            rseg R_HOME
0000            366            rseg R_GSINIT
0000            367            rseg R_GSINIT
0000            368   ;--------------------------------------------------------
0000            369   ; data variables initialization
0000            370   ;--------------------------------------------------------
0000            371            rseg R_DINIT
0000            372   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:49: bit serialmode=0; //1: JTAG, 0:uart
0000 C250       373            clr     _serialmode
0002            374   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:50: bit testbit, getchar_echo=0;
0002 C2D0       375            clr     _getchar_echo
0004            376            ; The linker places a 'ret' at the end of segment R_DINIT.
0004            377   ;--------------------------------------------------------
0004            378   ; code
0004            379   ;--------------------------------------------------------
0000            380            rseg R_CSEG
0000            381   ;------------------------------------------------------------
0000            382   ;Allocation info for local variables in function 'de2_8052_crt0'
0000            383   ;------------------------------------------------------------
0000            384   ;------------------------------------------------------------
0000            385   ;        C:/Source/call51/Bin/../include/mcs51/DE2_8052.h:317: void de2_8052_crt0 (void) _naked
0000            386   ;        -----------------------------------------
0000            387   ;         function de2_8052_crt0
0000            388   ;        -----------------------------------------
0000            389   _de2_8052_crt0:
0000            390   ;        naked function: no prologue.
0000            391   ;        C:/Source/call51/Bin/../include/mcs51/DE2_8052.h:386: _endasm;
0000            392            
0000            393            
0000            394             rseg R_GSINIT
0000            395             public _crt0
0000            396            _crt0:
0000 7581FF     397             mov sp,#_stack_start-1
0003 120100     398             lcall __c51_external_startup
0006 E582       399             mov a,dpl
0008 6001       400             jz __c51_init_data
000A 020100     401             ljmp __c51_program_startup
000D            402            __c51_init_data:
000D            403            
000D            404   ; Initialize xdata variables
000D            405            
000D 758200     406             mov dpl, #_R_XINIT_start
0010 758300     407             mov dph, #(_R_XINIT_start>>8)
0013 758400     408             mov _DPL1, #_R_IXSEG_start
0016 758500     409             mov _DPH1, #(_R_IXSEG_start>>8)
0019 7800       410             mov r0, #_R_IXSEG_size
001B 7900       411             mov r1, #(_R_IXSEG_size>>8)
001D            412            
001D            413            XInitLoop?repeat?:
001D E8         414             mov a, r0
001E 49         415             orl a, r1
001F 6001       416             jz XInitLoop?done?
0021 E4         417             clr a
0022 758600     418             mov _DPS, #0 ; Using dpl, dph
0025 93         419             movc a,@a+dptr
0026 A3         420             inc dptr
0027 758601     421             mov _DPS, #1 ; Using DPL1, DPH1
002A F0         422             movx @dptr, a
002B A3         423             inc dptr
002C 18         424             dec r0
002D B8FF00     425             cjne r0, #0xff, XInitLoop?repeat?
0030 19         426             dec r1
0031 8001       427             sjmp XInitLoop?repeat?
0033            428            
0033            429            XInitLoop?done?:
0033            430            
0033            431   ; Clear xdata variables
0033 758600     432             mov _DPS, #0 ; Make sure we are using dpl, dph
0036 758200     433             mov dpl, #_R_XSEG_start
0039 758300     434             mov dph, #(_R_XSEG_start>>8)
003C 7C00       435             mov r4, #_R_XSEG_size
003E 7D00       436             mov r5, #(_R_XSEG_size>>8)
0040            437            
0040            438            XClearLoop?repeat?:
0040 EC         439             mov a, r4
0041 4D         440             orl a, r5
0042 6001       441             jz XClearLoop?done?
0044 E4         442             clr a
0045 F0         443             movx @dptr, a
0046 A3         444             inc dptr
0047 1C         445             dec r4
0048 BCFF10     446             cjne r4, #0xff, XClearLoop?repeat?
004B 1D         447             dec r5
004C 8001       448             sjmp XClearLoop?repeat?
004E            449            
004E            450            XClearLoop?done?:
004E 120100     451             lcall _R_DINIT_start ; Initialize data/idata variables
0051            452            
0051            453            __c51_program_startup:
0051 120100     454             lcall _main
0054            455            
0054            456            forever?home?:
0054 8001       457             sjmp forever?home?
0056            458            
0056            459             
0056            460   ;        naked function: no epilogue.
0056            461   ;------------------------------------------------------------
0056            462   ;Allocation info for local variables in function 'inituart'
0056            463   ;------------------------------------------------------------
0056            464   ;------------------------------------------------------------
0056            465   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:52: void inituart (void)
0056            466   ;        -----------------------------------------
0056            467   ;         function inituart
0056            468   ;        -----------------------------------------
0056            469   _inituart:
0056            470            using   0
0056            471   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:54: RCAP2H=HIGH(TIMER_2_RELOAD);
0056 75CBFF     472            mov     _RCAP2H,#0xFF
0059            473   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:55: RCAP2L=LOW(TIMER_2_RELOAD);
0059 75CAF7     474            mov     _RCAP2L,#0xF7
005C            475   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:56: T2CON=0x34; // #00110100B
005C 75C834     476            mov     _T2CON,#0x34
005F            477   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:57: SCON=0x52; // Serial port in mode 1, ren, txrdy, rxempty
005F 759852     478            mov     _SCON,#0x52
0062 22         479            ret
0063            480   ;------------------------------------------------------------
0063            481   ;Allocation info for local variables in function 'putchar'
0063            482   ;------------------------------------------------------------
0063            483   ;c                         Allocated to registers r2 
0063            484   ;------------------------------------------------------------
0063            485   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:60: void putchar (char c)
0063            486   ;        -----------------------------------------
0063            487   ;         function putchar
0063            488   ;        -----------------------------------------
0063            489   _putchar:
0063 AA82       490            mov     r2,dpl
0065            491   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:62: if(serialmode==0)
0065 205020     492            jb      _serialmode,L004010?
0068            493   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:64: if (c=='\n')
0068 BA0A60     494            cjne    r2,#0x0A,L004006?
006B            495   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:66: while (!TI);
006B            496   L004001?:
006B            497   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:67: TI=0;
006B 1099E0     498            jbc     _TI,L004022?
006E 8001       499            sjmp    L004001?
0070            500   L004022?:
0070            501   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:68: SBUF='\r';
0070 75990D     502            mov     _SBUF,#0x0D
0073            503   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:70: while (!TI);
0073            504   L004006?:
0073            505   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:71: TI=0;
0073 109920     506            jbc     _TI,L004023?
0076 8001       507            sjmp    L004006?
0078            508   L004023?:
0078            509   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:72: SBUF=c;
0078 8A99       510            mov     _SBUF,r2
007A            511   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:76: JBUF=c; // Load transmit FIFO with value
007A 22         512            ret
007B            513   L004010?:
007B 8AC1       514            mov     _JBUF,r2
007D 22         515            ret
007E            516   ;------------------------------------------------------------
007E            517   ;Allocation info for local variables in function 'getchar'
007E            518   ;------------------------------------------------------------
007E            519   ;c                         Allocated to registers r2 
007E            520   ;------------------------------------------------------------
007E            521   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:80: char getchar (void)
007E            522   ;        -----------------------------------------
007E            523   ;         function getchar
007E            524   ;        -----------------------------------------
007E            525   _getchar:
007E            526   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:84: testbit=0;
007E C210       527            clr     _testbit
0080            528   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:85: if(serialmode==0)
0080 205060     529            jb      _serialmode,L005006?
0083            530   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:87: while (!RI);
0083            531   L005001?:
0083            532   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:88: RI=0;
0083 1098E0     533            jbc     _RI,L005023?
0086 8001       534            sjmp    L005001?
0088            535   L005023?:
0088            536   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:89: c=SBUF;
0088 AA99       537            mov     r2,_SBUF
008A            538   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:90: if (getchar_echo==1) putchar(c);
008A 30D020     539            jnb     _getchar_echo,L005013?
008D 8A82       540            mov     dpl,r2
008F C002       541            push    ar2
0091 120100     542            lcall   _putchar
0094 D002       543            pop     ar2
0096            544   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:94: while(!JRXRDY); // Wait for data to arrive
0096 8001       545            sjmp    L005013?
0098            546   L005006?:
0098 30C060     547            jnb     _JRXRDY,L005006?
009B            548   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:96: c=JBUF; // Read receive FIFO
009B AAC1       549            mov     r2,_JBUF
009D            550   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:98: if(SWB & 0x02) testbit=1;// {while (!TI); TI=0; SBUF=c;} // For debug purposes
009D E595       551            mov     a,_SWB
009F 30E120     552            jnb     acc.1,L005013?
00A2 D210       553            setb    _testbit
00A4            554   L005013?:
00A4            555   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:100: return c;
00A4 8A82       556            mov     dpl,r2
00A6 22         557            ret
00A7            558   ;------------------------------------------------------------
00A7            559   ;Allocation info for local variables in function 'getchare'
00A7            560   ;------------------------------------------------------------
00A7            561   ;c                         Allocated to registers r2 
00A7            562   ;------------------------------------------------------------
00A7            563   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:103: char getchare (void)
00A7            564   ;        -----------------------------------------
00A7            565   ;         function getchare
00A7            566   ;        -----------------------------------------
00A7            567   _getchare:
00A7            568   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:107: c=getchar();
00A7 120100     569            lcall   _getchar
00AA            570   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:108: putchar(c);
00AA AA82       571            mov  r2,dpl
00AC C002       572            push    ar2
00AE 120100     573            lcall   _putchar
00B1 D002       574            pop     ar2
00B3            575   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:109: return c;
00B3 8A82       576            mov     dpl,r2
00B5 22         577            ret
00B6            578   ;------------------------------------------------------------
00B6            579   ;Allocation info for local variables in function 'sends'
00B6            580   ;------------------------------------------------------------
00B6            581   ;c                         Allocated to registers r2 r3 r4 
00B6            582   ;n                         Allocated to registers r6 
00B6            583   ;------------------------------------------------------------
00B6            584   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:112: void sends (unsigned char * c)
00B6            585   ;        -----------------------------------------
00B6            586   ;         function sends
00B6            587   ;        -----------------------------------------
00B6            588   _sends:
00B6 AA82       589            mov     r2,dpl
00B8 AB83       590            mov     r3,dph
00BA ACF0       591            mov     r4,b
00BC            592   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:115: while(n=*c)
00BC            593   L007001?:
00BC 8A82       594            mov     dpl,r2
00BE 8B83       595            mov     dph,r3
00C0 8CF0       596            mov     b,r4
00C2 120100     597            lcall   __gptrget
00C5 FD         598            mov     r5,a
00C6 FE         599            mov     r6,a
00C7 6001       600            jz      L007004?
00C9            601   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:117: putchar(n);
00C9 8E82       602            mov     dpl,r6
00CB C002       603            push    ar2
00CD C003       604            push    ar3
00CF C004       605            push    ar4
00D1 120100     606            lcall   _putchar
00D4 D004       607            pop     ar4
00D6 D003       608            pop     ar3
00D8 D002       609            pop     ar2
00DA            610   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:118: c++;
00DA 0A         611            inc     r2
00DB BA00E0     612            cjne    r2,#0x00,L007001?
00DE 0B         613            inc     r3
00DF 8001       614            sjmp    L007001?
00E1            615   L007004?:
00E1 22         616            ret
00E2            617   ;------------------------------------------------------------
00E2            618   ;Allocation info for local variables in function 'chartohex'
00E2            619   ;------------------------------------------------------------
00E2            620   ;c                         Allocated to registers r2 
00E2            621   ;------------------------------------------------------------
00E2            622   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:122: unsigned char chartohex(char c)
00E2            623   ;        -----------------------------------------
00E2            624   ;         function chartohex
00E2            625   ;        -----------------------------------------
00E2            626   _chartohex:
00E2            627   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:124: if(c & 0x40) c+=9; //  a to f or A to F
00E2 E582       628            mov     a,dpl
00E4 FA         629            mov     r2,a
00E5 30E6A0     630            jnb     acc.6,L008002?
00E8 7409       631            mov     a,#0x09
00EA 2A         632            add     a,r2
00EB FA         633            mov     r2,a
00EC            634   L008002?:
00EC            635   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:125: return (c & 0xf);
00EC 740F       636            mov     a,#0x0F
00EE 5A         637            anl     a,r2
00EF F582       638            mov     dpl,a
00F1 22         639            ret
00F2            640   ;------------------------------------------------------------
00F2            641   ;Allocation info for local variables in function 'getbyte'
00F2            642   ;------------------------------------------------------------
00F2            643   ;j                         Allocated with name '_getbyte_j_1_82'
00F2            644   ;------------------------------------------------------------
00F2            645   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:129: unsigned char getbyte (void)
00F2            646   ;        -----------------------------------------
00F2            647   ;         function getbyte
00F2            648   ;        -----------------------------------------
00F2            649   _getbyte:
00F2            650   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:133: j=chartohex(getchare())*0x10;
00F2 120100     651            lcall   _getchare
00F5 120100     652            lcall   _chartohex
00F8 E582       653            mov     a,dpl
00FA C4         654            swap    a
00FB 54F0       655            anl     a,#0xf0
00FD F5C0       656            mov     _getbyte_j_1_82,a
00FF            657   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:134: j|=chartohex(getchare());
00FF 120100     658            lcall   _getchare
0102 120100     659            lcall   _chartohex
0105 E582       660            mov     a,dpl
0107 42C0       661            orl     _getbyte_j_1_82,a
0109            662   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:136: return j;
0109 85C082     663            mov     dpl,_getbyte_j_1_82
010C 22         664            ret
010D            665   ;------------------------------------------------------------
010D            666   ;Allocation info for local variables in function 'Out_Byte_Flash'
010D            667   ;------------------------------------------------------------
010D            668   ;val                       Allocated with name '_Out_Byte_Flash_PARM_2'
010D            669   ;address                   Allocated to registers r2 r3 
010D            670   ;------------------------------------------------------------
010D            671   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:139: void Out_Byte_Flash (unsigned int address, unsigned char val)
010D            672   ;        -----------------------------------------
010D            673   ;         function Out_Byte_Flash
010D            674   ;        -----------------------------------------
010D            675   _Out_Byte_Flash:
010D AA82       676            mov     r2,dpl
010F AB83       677            mov     r3,dph
0111            678   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:141: FLASH_MOD=0xff; // Set data port for output
0111 75DDFF     679            mov     _FLASH_MOD,#0xFF
0114            680   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:142: FLASH_ADD0=address%0x100;
0114 8A04       681            mov     ar4,r2
0116 8CE1       682            mov     _FLASH_ADD0,r4
0118            683   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:143: FLASH_ADD1=address/0x100;
0118 8B02       684            mov     ar2,r3
011A 8AE2       685            mov     _FLASH_ADD1,r2
011C            686   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:144: FLASH_ADD2=FLASHSECTOR;
011C 75E301     687            mov     _FLASH_ADD2,#0x01
011F            688   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:145: FLASH_DATA=val;
011F 8590DC     689            mov     _FLASH_DATA,_Out_Byte_Flash_PARM_2
0122            690   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:150: FLASH_CMD=0b_0000_0111; // FL_CE_N=0, FL_WE_N=1
0122 75DB07     691            mov     _FLASH_CMD,#0x07
0125            692   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:151: FLASH_CMD=0b_0000_0101; // FL_CE_N=0, FL_WE_N=0
0125 75DB05     693            mov     _FLASH_CMD,#0x05
0128            694   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:152: FLASH_CMD=0b_0000_0111; // FL_CE_N=0, FL_WE_N=1
0128 75DB07     695            mov     _FLASH_CMD,#0x07
012B            696   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:153: FLASH_CMD=0b_0000_1111; // FL_CE_N=1, FL_WE_N=1
012B 75DB0F     697            mov     _FLASH_CMD,#0x0F
012E 22         698            ret
012F            699   ;------------------------------------------------------------
012F            700   ;Allocation info for local variables in function 'In_Byte_Flash'
012F            701   ;------------------------------------------------------------
012F            702   ;address                   Allocated to registers r2 r3 
012F            703   ;j                         Allocated to registers 
012F            704   ;------------------------------------------------------------
012F            705   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:156: unsigned char In_Byte_Flash (unsigned int address)
012F            706   ;        -----------------------------------------
012F            707   ;         function In_Byte_Flash
012F            708   ;        -----------------------------------------
012F            709   _In_Byte_Flash:
012F AA82       710            mov     r2,dpl
0131 AB83       711            mov     r3,dph
0133            712   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:160: FLASH_MOD=0x00; // Set data port for input
0133 75DD00     713            mov     _FLASH_MOD,#0x00
0136            714   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:161: FLASH_ADD0=address%0x100;
0136 8A04       715            mov     ar4,r2
0138 8CE1       716            mov     _FLASH_ADD0,r4
013A            717   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:162: FLASH_ADD1=address/0x100;
013A 8B02       718            mov     ar2,r3
013C 8AE2       719            mov     _FLASH_ADD1,r2
013E            720   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:163: FLASH_ADD2=FLASHSECTOR;
013E 75E301     721            mov     _FLASH_ADD2,#0x01
0141            722   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:164: FLASH_CMD=0b_0000_0111; // FL_CE_N=0, FL_OE_N=1
0141 75DB07     723            mov     _FLASH_CMD,#0x07
0144            724   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:165: FLASH_CMD=0b_0000_0011; // FL_CE_N=0, FL_OE_N=0
0144 75DB03     725            mov     _FLASH_CMD,#0x03
0147            726   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:166: j=FLASH_DATA;
0147 85DC82     727            mov     dpl,_FLASH_DATA
014A            728   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:167: FLASH_CMD=0b_0000_0111; // FL_CE_N=0, FL_OE_N=1
014A 75DB07     729            mov     _FLASH_CMD,#0x07
014D            730   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:168: FLASH_CMD=0b_0000_1111; // FL_CE_N=1, FL_OE_N=1
014D 75DB0F     731            mov     _FLASH_CMD,#0x0F
0150            732   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:169: return j;
0150 22         733            ret
0151            734   ;------------------------------------------------------------
0151            735   ;Allocation info for local variables in function 'EraseSector'
0151            736   ;------------------------------------------------------------
0151            737   ;------------------------------------------------------------
0151            738   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:172: void EraseSector (void)
0151            739   ;        -----------------------------------------
0151            740   ;         function EraseSector
0151            741   ;        -----------------------------------------
0151            742   _EraseSector:
0151            743   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:174: Out_Byte_Flash(0x0AAA, 0xAA);
0151 7590AA     744            mov     _Out_Byte_Flash_PARM_2,#0xAA
0154 900AAA     745            mov     dptr,#0x0AAA
0157 120100     746            lcall   _Out_Byte_Flash
015A            747   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:175: Out_Byte_Flash(0x0555, 0x55);
015A 759055     748            mov     _Out_Byte_Flash_PARM_2,#0x55
015D 900555     749            mov     dptr,#0x0555
0160 120100     750            lcall   _Out_Byte_Flash
0163            751   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:176: Out_Byte_Flash(0x0AAA, 0x80);
0163 759080     752            mov     _Out_Byte_Flash_PARM_2,#0x80
0166 900AAA     753            mov     dptr,#0x0AAA
0169 120100     754            lcall   _Out_Byte_Flash
016C            755   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:177: Out_Byte_Flash(0x0AAA, 0xAA);
016C 7590AA     756            mov     _Out_Byte_Flash_PARM_2,#0xAA
016F 900AAA     757            mov     dptr,#0x0AAA
0172 120100     758            lcall   _Out_Byte_Flash
0175            759   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:178: Out_Byte_Flash(0x0555, 0x55);
0175 759055     760            mov     _Out_Byte_Flash_PARM_2,#0x55
0178 900555     761            mov     dptr,#0x0555
017B 120100     762            lcall   _Out_Byte_Flash
017E            763   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:179: Out_Byte_Flash(0x0000, 0x30);
017E 759030     764            mov     _Out_Byte_Flash_PARM_2,#0x30
0181 900000     765            mov     dptr,#0x0000
0184 120100     766            lcall   _Out_Byte_Flash
0187            767   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:181: while(In_Byte_Flash(0)!=0xff);
0187            768   L012001?:
0187 900000     769            mov     dptr,#0x0000
018A 120100     770            lcall   _In_Byte_Flash
018D AA82       771            mov     r2,dpl
018F BAFFE0     772            cjne    r2,#0xFF,L012001?
0192 22         773            ret
0193            774   ;------------------------------------------------------------
0193            775   ;Allocation info for local variables in function 'Write_XRAM'
0193            776   ;------------------------------------------------------------
0193            777   ;Value                     Allocated with name '_Write_XRAM_PARM_2'
0193            778   ;Address                   Allocated to registers r2 r3 
0193            779   ;------------------------------------------------------------
0193            780   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:184: void Write_XRAM (unsigned int Address, unsigned char Value)
0193            781   ;        -----------------------------------------
0193            782   ;         function Write_XRAM
0193            783   ;        -----------------------------------------
0193            784   _Write_XRAM:
0193            785   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:186: *((unsigned char xdata *) Address)=Value;
0193 E540       786            mov     a,_Write_XRAM_PARM_2
0195 F0         787            movx    @dptr,a
0196 22         788            ret
0197            789   ;------------------------------------------------------------
0197            790   ;Allocation info for local variables in function 'Read_XRAM'
0197            791   ;------------------------------------------------------------
0197            792   ;Address                   Allocated to registers r2 r3 
0197            793   ;------------------------------------------------------------
0197            794   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:189: unsigned char Read_XRAM (unsigned int Address)
0197            795   ;        -----------------------------------------
0197            796   ;         function Read_XRAM
0197            797   ;        -----------------------------------------
0197            798   _Read_XRAM:
0197            799   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:191: return *((unsigned char xdata *) Address);
0197 E0         800            movx    a,@dptr
0198 F582       801            mov     dpl,a
019A 22         802            ret
019B            803   ;------------------------------------------------------------
019B            804   ;Allocation info for local variables in function 'FlashByte'
019B            805   ;------------------------------------------------------------
019B            806   ;Value                     Allocated with name '_FlashByte_PARM_2'
019B            807   ;Address                   Allocated to registers r2 r3 
019B            808   ;------------------------------------------------------------
019B            809   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:194: void FlashByte (unsigned int Address, unsigned char Value)
019B            810   ;        -----------------------------------------
019B            811   ;         function FlashByte
019B            812   ;        -----------------------------------------
019B            813   _FlashByte:
019B AA82       814            mov     r2,dpl
019D AB83       815            mov     r3,dph
019F            816   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:196: Out_Byte_Flash(0x0AAA, 0xAA);
019F 7590AA     817            mov     _Out_Byte_Flash_PARM_2,#0xAA
01A2 900AAA     818            mov     dptr,#0x0AAA
01A5 C002       819            push    ar2
01A7 C003       820            push    ar3
01A9 120100     821            lcall   _Out_Byte_Flash
01AC            822   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:197: Out_Byte_Flash(0x0555, 0x55);
01AC 759055     823            mov     _Out_Byte_Flash_PARM_2,#0x55
01AF 900555     824            mov     dptr,#0x0555
01B2 120100     825            lcall   _Out_Byte_Flash
01B5            826   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:198: Out_Byte_Flash(0x0AAA, 0xA0);
01B5 7590A0     827            mov     _Out_Byte_Flash_PARM_2,#0xA0
01B8 900AAA     828            mov     dptr,#0x0AAA
01BB 120100     829            lcall   _Out_Byte_Flash
01BE D003       830            pop     ar3
01C0 D002       831            pop     ar2
01C2            832   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:199: Out_Byte_Flash(Address, Value);
01C2 855090     833            mov     _Out_Byte_Flash_PARM_2,_FlashByte_PARM_2
01C5 8A82       834            mov     dpl,r2
01C7 8B83       835            mov     dph,r3
01C9 C002       836            push    ar2
01CB C003       837            push    ar3
01CD 120100     838            lcall   _Out_Byte_Flash
01D0 D003       839            pop     ar3
01D2 D002       840            pop     ar2
01D4            841   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:201: while(In_Byte_Flash(Address)!=Value);
01D4            842   L015001?:
01D4 8A82       843            mov     dpl,r2
01D6 8B83       844            mov     dph,r3
01D8 C002       845            push    ar2
01DA C003       846            push    ar3
01DC 120100     847            lcall   _In_Byte_Flash
01DF AC82       848            mov     r4,dpl
01E1 D003       849            pop     ar3
01E3 D002       850            pop     ar2
01E5 EC         851            mov     a,r4
01E6 B55020     852            cjne    a,_FlashByte_PARM_2,L015001?
01E9 22         853            ret
01EA            854   ;------------------------------------------------------------
01EA            855   ;Allocation info for local variables in function 'Load_Ram_Fast'
01EA            856   ;------------------------------------------------------------
01EA            857   ;------------------------------------------------------------
01EA            858   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:204: void Load_Ram_Fast (void)
01EA            859   ;        -----------------------------------------
01EA            860   ;         function Load_Ram_Fast
01EA            861   ;        -----------------------------------------
01EA            862   _Load_Ram_Fast:
01EA            863   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:206: XRAMUSEDAS=0x01; // 32k RAM accessed as xdata
01EA 75C301     864            mov     _XRAMUSEDAS,#0x01
01ED            865   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:207: FLASH_ADD2=FLASHSECTOR;
01ED 75E301     866            mov     _FLASH_ADD2,#0x01
01F0            867   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:208: FLASH_MOD=0x00; // Set data port for input
01F0 75DD00     868            mov     _FLASH_MOD,#0x00
01F3            869   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:229: _endasm;
01F3            870            
01F3 900000     871              mov dptr, #0
01F6 75DB0F     872              mov _FLASH_CMD, #0FH
01F9            873            
01F9            874             Load_Ram_Loop:
01F9 8582E1     875              mov _FLASH_ADD0, dpl
01FC 8583E2     876              mov _FLASH_ADD1, dph
01FF 75DB07     877              mov _FLASH_CMD, #00000111B
0202 75DB03     878              mov _FLASH_CMD, #00000011B
0205 E5DC       879              mov a, _FLASH_DATA
0207 75DB0F     880              mov _FLASH_CMD, #00001111B
020A F0         881              movx @dptr, a
020B A3         882              inc dptr
020C E583       883              mov a, dph
020E 30E760     884              jnb acc.7, Load_Ram_Loop
0211            885            
0211 75C300     886              mov _XRAMUSEDAS, #0 ; 32k RAM accessed as code
0214            887     ; RAM is loaded with user code. Run it.
0214 758107     888              mov sp, #7
0217 020000     889              ljmp 0x0000
021A            890             
021A 22         891            ret
021B            892   ;------------------------------------------------------------
021B            893   ;Allocation info for local variables in function 'loadintelhex'
021B            894   ;------------------------------------------------------------
021B            895   ;address                   Allocated with name '_loadintelhex_address_1_98'
021B            896   ;j                         Allocated with name '_loadintelhex_j_1_98'
021B            897   ;size                      Allocated with name '_loadintelhex_size_1_98'
021B            898   ;type                      Allocated with name '_loadintelhex_type_1_98'
021B            899   ;checksum                  Allocated with name '_loadintelhex_checksum_1_98'
021B            900   ;n                         Allocated with name '_loadintelhex_n_1_98'
021B            901   ;echo                      Allocated with name '_loadintelhex_echo_1_98'
021B            902   ;savedcs                   Allocated to registers r2 
021B            903   ;------------------------------------------------------------
021B            904   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:232: void loadintelhex (void)
021B            905   ;        -----------------------------------------
021B            906   ;         function loadintelhex
021B            907   ;        -----------------------------------------
021B            908   _loadintelhex:
021B            909   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:239: while(1)
021B            910   L017025?:
021B            911   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:241: n=getchare();
021B 120100     912            lcall   _getchare
021E 8582A0     913            mov     _loadintelhex_n_1_98,dpl
0221            914   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:243: if(n==(unsigned char)':')
0221 743A       915            mov     a,#0x3A
0223 B5A0E0     916            cjne    a,_loadintelhex_n_1_98,L017053?
0226 8001       917            sjmp    L017054?
0228            918   L017053?:
0228 020100     919            ljmp    L017022?
022B            920   L017054?:
022B            921   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:245: echo='.'; // If everything works ok, send a period...
022B 75F02E     922            mov     _loadintelhex_echo_1_98,#0x2E
022E            923   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:246: size=getbyte();
022E 120100     924            lcall   _getbyte
0231 8582B0     925            mov     _loadintelhex_size_1_98,dpl
0234            926   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:247: checksum=size;
0234 85B050     927            mov     _loadintelhex_checksum_1_98,_loadintelhex_size_1_98
0237            928   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:249: address=getbyte();
0237 120100     929            lcall   _getbyte
023A AA82       930            mov     r2,dpl
023C 8A10       931            mov     _loadintelhex_address_1_98,r2
023E 751100     932            mov     (_loadintelhex_address_1_98 + 1),#0x00
0241            933   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:250: checksum+=address;
0241 AA10       934            mov     r2,_loadintelhex_address_1_98
0243 EA         935            mov     a,r2
0244 2550       936            add     a,_loadintelhex_checksum_1_98
0246 F550       937            mov     _loadintelhex_checksum_1_98,a
0248            938   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:251: address*=0x100;
0248 851011     939            mov     (_loadintelhex_address_1_98 + 1),_loadintelhex_address_1_98
024B 751000     940            mov     _loadintelhex_address_1_98,#0x00
024E            941   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:252: n=getbyte();
024E 120100     942            lcall   _getbyte
0251 8582A0     943            mov     _loadintelhex_n_1_98,dpl
0254            944   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:253: checksum+=n;
0254 E5A0       945            mov     a,_loadintelhex_n_1_98
0256 2550       946            add     a,_loadintelhex_checksum_1_98
0258 F550       947            mov     _loadintelhex_checksum_1_98,a
025A            948   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:254: address+=n;
025A AAA0       949            mov     r2,_loadintelhex_n_1_98
025C 7B00       950            mov     r3,#0x00
025E EA         951            mov     a,r2
025F 2510       952            add     a,_loadintelhex_address_1_98
0261 F510       953            mov     _loadintelhex_address_1_98,a
0263 EB         954            mov     a,r3
0264 3511       955            addc    a,(_loadintelhex_address_1_98 + 1)
0266 F511       956            mov     (_loadintelhex_address_1_98 + 1),a
0268            957   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:256: type=getbyte();
0268 120100     958            lcall   _getbyte
026B 858200     959            mov     _loadintelhex_type_1_98,dpl
026E            960   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:257: checksum+=type;
026E E500       961            mov     a,_loadintelhex_type_1_98
0270 2550       962            add     a,_loadintelhex_checksum_1_98
0272 F550       963            mov     _loadintelhex_checksum_1_98,a
0274            964   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:259: for(j=0; j<size; j++)
0274 756000     965            mov     _loadintelhex_j_1_98,#0x00
0277            966   L017027?:
0277 C3         967            clr     c
0278 E560       968            mov     a,_loadintelhex_j_1_98
027A 95B0       969            subb    a,_loadintelhex_size_1_98
027C 5001       970            jnc     L017030?
027E            971   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:261: n=getbyte();
027E 120100     972            lcall   _getbyte
0281 8582A0     973            mov     _loadintelhex_n_1_98,dpl
0284            974   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:262: if(j<MAXBUFF) buff[j]=n; // Don't overrun the buffer
0284 74C0       975            mov     a,#0x100 - 0x40
0286 2560       976            add     a,_loadintelhex_j_1_98
0288 4001       977            jc      L017002?
028A E560       978            mov     a,_loadintelhex_j_1_98
028C 2490       979            add     a,#_buff
028E F8         980            mov     r0,a
028F A6A0       981            mov     @r0,_loadintelhex_n_1_98
0291            982   L017002?:
0291            983   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:263: checksum+=n;
0291 E5A0       984            mov     a,_loadintelhex_n_1_98
0293 2550       985            add     a,_loadintelhex_checksum_1_98
0295 F550       986            mov     _loadintelhex_checksum_1_98,a
0297            987   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:259: for(j=0; j<size; j++)
0297 0560       988            inc     _loadintelhex_j_1_98
0299 8001       989            sjmp    L017027?
029B            990   L017030?:
029B            991   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:266: savedcs=getbyte();
029B 120100     992            lcall   _getbyte
029E            993   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:267: checksum+=savedcs;
029E E582       994            mov     a,dpl
02A0 FA         995            mov     r2,a
02A1 2550       996            add     a,_loadintelhex_checksum_1_98
02A3 F550       997            mov     _loadintelhex_checksum_1_98,a
02A5            998   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:268: if(size>MAXBUFF) checksum=1; // Force a checksum error
02A5 E5B0       999            mov     a,_loadintelhex_size_1_98
02A7 24BF      1000            add     a,#0xff - 0x40
02A9 5001      1001            jnc     L017004?
02AB 755001    1002            mov     _loadintelhex_checksum_1_98,#0x01
02AE           1003   L017004?:
02AE           1004   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:270: if(checksum==0) switch(type)
02AE E550      1005            mov     a,_loadintelhex_checksum_1_98
02B0 6001      1006            jz      L017058?
02B2 020100    1007            ljmp    L017014?
02B5           1008   L017058?:
02B5 AA00      1009            mov     r2,_loadintelhex_type_1_98
02B7 BA0020    1010            cjne    r2,#0x00,L017059?
02BA 8001      1011            sjmp    L017006?
02BC           1012   L017059?:
02BC BA01A0    1013            cjne    r2,#0x01,L017060?
02BF 8001      1014            sjmp    L017010?
02C1           1015   L017060?:
02C1 BA0328    1016            cjne    r2,#0x03,L017061?
02C4 8001      1017            sjmp    L017009?
02C6           1018   L017061?:
02C6 BA04A8    1019            cjne    r2,#0x04,L017011?
02C9           1020   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:273: EraseSector();
02C9 120100    1021            lcall   _EraseSector
02CC           1022   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:274: LEDG_1=1; // Flash erased
02CC D2F9      1023            setb    _LEDG_1
02CE           1024   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:275: break;
02CE           1025   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:277: case 0: // Write to flash command.
02CE 8001      1026            sjmp    L017015?
02D0           1027   L017006?:
02D0           1028   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:278: for(j=0; j<size; j++)
02D0 756000    1029            mov     _loadintelhex_j_1_98,#0x00
02D3           1030   L017031?:
02D3 C3        1031            clr     c
02D4 E560      1032            mov     a,_loadintelhex_j_1_98
02D6 95B0      1033            subb    a,_loadintelhex_size_1_98
02D8 5001      1034            jnc     L017015?
02DA           1035   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:280: FlashByte(address, buff[j]);
02DA E560      1036            mov     a,_loadintelhex_j_1_98
02DC 2490      1037            add     a,#_buff
02DE F8        1038            mov     r0,a
02DF 8650      1039            mov     _FlashByte_PARM_2,@r0
02E1 851082    1040            mov     dpl,_loadintelhex_address_1_98
02E4 851183    1041            mov     dph,(_loadintelhex_address_1_98 + 1)
02E7 120100    1042            lcall   _FlashByte
02EA           1043   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:281: if (In_Byte_Flash(address)!=buff[j]) // Verify last write.
02EA 851082    1044            mov     dpl,_loadintelhex_address_1_98
02ED 851183    1045            mov     dph,(_loadintelhex_address_1_98 + 1)
02F0 120100    1046            lcall   _In_Byte_Flash
02F3 AA82      1047            mov     r2,dpl
02F5 E560      1048            mov     a,_loadintelhex_j_1_98
02F7 2490      1049            add     a,#_buff
02F9 F8        1050            mov     r0,a
02FA 8603      1051            mov     ar3,@r0
02FC EA        1052            mov     a,r2
02FD B50368    1053            cjne    a,ar3,L017065?
0300 8001      1054            sjmp    L017008?
0302           1055   L017065?:
0302           1056   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:283: echo='!';
0302 75F021    1057            mov     _loadintelhex_echo_1_98,#0x21
0305           1058   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:284: LEDRA_0=1;
0305 D2E8      1059            setb    _LEDRA_0
0307           1060   L017008?:
0307           1061   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:286: address++;
0307 7401      1062            mov     a,#0x01
0309 2510      1063            add     a,_loadintelhex_address_1_98
030B F510      1064            mov     _loadintelhex_address_1_98,a
030D E4        1065            clr     a
030E 3511      1066            addc    a,(_loadintelhex_address_1_98 + 1)
0310 F511      1067            mov     (_loadintelhex_address_1_98 + 1),a
0312           1068   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:278: for(j=0; j<size; j++)
0312 0560      1069            inc     _loadintelhex_j_1_98
0314           1070   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:290: case 3: // Send ID number command.
0314 8001      1071            sjmp    L017031?
0316           1072   L017009?:
0316           1073   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:291: sends("DE1");
0316 9091E8    1074            mov     dptr,#__str_0
0319 75F080    1075            mov     b,#0x80
031C 120100    1076            lcall   _sends
031F           1077   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:292: break;
031F           1078   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:294: case 1: // End record
031F 8001      1079            sjmp    L017015?
0321           1080   L017010?:
0321           1081   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:295: LEDG_2=1; // Flash loaded
0321 D2FA      1082            setb    _LEDG_2
0323           1083   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:296: break;
0323           1084   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:298: default: // Unknown command;
0323 8001      1085            sjmp    L017015?
0325           1086   L017011?:
0325           1087   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:299: echo='?';
0325 75F03F    1088            mov     _loadintelhex_echo_1_98,#0x3F
0328           1089   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:300: LEDRA_2=1;
0328 D2EA      1090            setb    _LEDRA_2
032A           1091   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:302: }
032A 8001      1092            sjmp    L017015?
032C           1093   L017014?:
032C           1094   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:305: echo='X'; // Checksum error
032C 75F058    1095            mov     _loadintelhex_echo_1_98,#0x58
032F           1096   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:306: LEDRA_1=1;
032F D2E9      1097            setb    _LEDRA_1
0331           1098   L017015?:
0331           1099   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:308: putchar(echo);
0331 85F082    1100            mov     dpl,_loadintelhex_echo_1_98
0334 120100    1101            lcall   _putchar
0337 020100    1102            ljmp    L017025?
033A           1103   L017022?:
033A           1104   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:310: else if(n==(unsigned char)'`') return; // Go to interactive mode using serial port.
033A 7460      1105            mov     a,#0x60
033C B5A028    1106            cjne    a,_loadintelhex_n_1_98,L017019?
033F 22        1107            ret
0340           1108   L017019?:
0340           1109   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:311: else if(n==(unsigned char)'U')
0340 7455      1110            mov     a,#0x55
0342 B5A068    1111            cjne    a,_loadintelhex_n_1_98,L017068?
0345 8001      1112            sjmp    L017069?
0347           1113   L017068?:
0347 020100    1114            ljmp    L017025?
034A           1115   L017069?:
034A           1116   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:313: LEDRA=0;
034A 75E800    1117            mov     _LEDRA,#0x00
034D           1118   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:314: LEDRB=0;
034D 759500    1119            mov     _LEDRB,#0x00
0350           1120   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:315: LEDG=1; // Bootloader running
0350 75F801    1121            mov     _LEDG,#0x01
0353 020100    1122            ljmp    L017025?
0356           1123   ;------------------------------------------------------------
0356           1124   ;Allocation info for local variables in function 'str2hex'
0356           1125   ;------------------------------------------------------------
0356           1126   ;s                         Allocated to registers r2 r3 r4 
0356           1127   ;x                         Allocated to registers r5 r6 
0356           1128   ;i                         Allocated to registers r7 
0356           1129   ;sloc0                     Allocated with name '_str2hex_sloc0_1_0'
0356           1130   ;------------------------------------------------------------
0356           1131   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:320: unsigned int str2hex (char * s)
0356           1132   ;        -----------------------------------------
0356           1133   ;         function str2hex
0356           1134   ;        -----------------------------------------
0356           1135   _str2hex:
0356 AA82      1136            mov     r2,dpl
0358 AB83      1137            mov     r3,dph
035A ACF0      1138            mov     r4,b
035C           1139   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:322: unsigned int x=0;
035C 7D00      1140            mov     r5,#0x00
035E 7E00      1141            mov     r6,#0x00
0360           1142   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:324: while(*s)
0360           1143   L018013?:
0360 8A82      1144            mov     dpl,r2
0362 8B83      1145            mov     dph,r3
0364 8CF0      1146            mov     b,r4
0366 120100    1147            lcall   __gptrget
0369 FF        1148            mov     r7,a
036A 7001      1149            jnz     L018027?
036C 020100    1150            ljmp    L018015?
036F           1151   L018027?:
036F           1152   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:326: if((*s>='0')&&(*s<='9')) i=*s-'0';
036F C3        1153            clr     c
0370 EF        1154            mov     a,r7
0371 6480      1155            xrl     a,#0x80
0373 94B0      1156            subb    a,#0xb0
0375 4001      1157            jc      L018010?
0377 74B9      1158            mov     a,#(0x39 ^ 0x80)
0379 8FF0      1159            mov     b,r7
037B 63F080    1160            xrl     b,#0x80
037E 95F0      1161            subb    a,b
0380 4001      1162            jc      L018010?
0382 EF        1163            mov     a,r7
0383 24D0      1164            add     a,#0xd0
0385 FF        1165            mov     r7,a
0386 8001      1166            sjmp    L018011?
0388           1167   L018010?:
0388           1168   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:327: else if ( (*s>='A') && (*s<='F') ) i=*s-'A'+10;
0388 8A82      1169            mov     dpl,r2
038A 8B83      1170            mov     dph,r3
038C 8CF0      1171            mov     b,r4
038E 120100    1172            lcall   __gptrget
0391 F8        1173            mov     r0,a
0392 C3        1174            clr     c
0393 6480      1175            xrl     a,#0x80
0395 94C1      1176            subb    a,#0xc1
0397 4001      1177            jc      L018006?
0399 74C6      1178            mov     a,#(0x46 ^ 0x80)
039B 88F0      1179            mov     b,r0
039D 63F080    1180            xrl     b,#0x80
03A0 95F0      1181            subb    a,b
03A2 4001      1182            jc      L018006?
03A4 74C9      1183            mov     a,#0xC9
03A6 28        1184            add     a,r0
03A7 FF        1185            mov     r7,a
03A8 8001      1186            sjmp    L018011?
03AA           1187   L018006?:
03AA           1188   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:328: else if ( (*s>='a') && (*s<='f') ) i=*s-'a'+10;
03AA C3        1189            clr     c
03AB E8        1190            mov     a,r0
03AC 6480      1191            xrl     a,#0x80
03AE 94E1      1192            subb    a,#0xe1
03B0 4001      1193            jc      L018015?
03B2 74E6      1194            mov     a,#(0x66 ^ 0x80)
03B4 88F0      1195            mov     b,r0
03B6 63F080    1196            xrl     b,#0x80
03B9 95F0      1197            subb    a,b
03BB 4001      1198            jc      L018015?
03BD 74A9      1199            mov     a,#0xA9
03BF 28        1200            add     a,r0
03C0 FF        1201            mov     r7,a
03C1           1202   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:329: else break;
03C1           1203   L018011?:
03C1           1204   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:330: x=(x*0x10)+i;
03C1 8D80      1205            mov     _str2hex_sloc0_1_0,r5
03C3 EE        1206            mov     a,r6
03C4 C4        1207            swap    a
03C5 54F0      1208            anl     a,#0xf0
03C7 C580      1209            xch     a,_str2hex_sloc0_1_0
03C9 C4        1210            swap    a
03CA C580      1211            xch     a,_str2hex_sloc0_1_0
03CC 6580      1212            xrl     a,_str2hex_sloc0_1_0
03CE C580      1213            xch     a,_str2hex_sloc0_1_0
03D0 54F0      1214            anl     a,#0xf0
03D2 C580      1215            xch     a,_str2hex_sloc0_1_0
03D4 6580      1216            xrl     a,_str2hex_sloc0_1_0
03D6 F581      1217            mov     (_str2hex_sloc0_1_0 + 1),a
03D8 7800      1218            mov     r0,#0x00
03DA EF        1219            mov     a,r7
03DB 2580      1220            add     a,_str2hex_sloc0_1_0
03DD FD        1221            mov     r5,a
03DE E8        1222            mov     a,r0
03DF 3581      1223            addc    a,(_str2hex_sloc0_1_0 + 1)
03E1 FE        1224            mov     r6,a
03E2           1225   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:331: s++;
03E2 0A        1226            inc     r2
03E3 BA0068    1227            cjne    r2,#0x00,L018034?
03E6 0B        1228            inc     r3
03E7           1229   L018034?:
03E7 020100    1230            ljmp    L018013?
03EA           1231   L018015?:
03EA           1232   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:333: return x;
03EA 8D82      1233            mov     dpl,r5
03EC 8E83      1234            mov     dph,r6
03EE 22        1235            ret
03EF           1236   ;------------------------------------------------------------
03EF           1237   ;Allocation info for local variables in function 'OutByte'
03EF           1238   ;------------------------------------------------------------
03EF           1239   ;x                         Allocated to registers r2 
03EF           1240   ;------------------------------------------------------------
03EF           1241   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:336: void OutByte (unsigned char x)
03EF           1242   ;        -----------------------------------------
03EF           1243   ;         function OutByte
03EF           1244   ;        -----------------------------------------
03EF           1245   _OutByte:
03EF           1246   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:338: putchar(hexval[x/0x10]);
03EF E582      1247            mov     a,dpl
03F1 FA        1248            mov     r2,a
03F2 C4        1249            swap    a
03F3 540F      1250            anl     a,#0x0f
03F5 901310    1251            mov     dptr,#_hexval
03F8 93        1252            movc    a,@a+dptr
03F9 F582      1253            mov     dpl,a
03FB C002      1254            push    ar2
03FD 120100    1255            lcall   _putchar
0400 D002      1256            pop     ar2
0402           1257   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:339: putchar(hexval[x%0x10]);
0402 740F      1258            mov     a,#0x0F
0404 5A        1259            anl     a,r2
0405 901310    1260            mov     dptr,#_hexval
0408 93        1261            movc    a,@a+dptr
0409 F582      1262            mov     dpl,a
040B 020100    1263            ljmp    _putchar
040E           1264   ;------------------------------------------------------------
040E           1265   ;Allocation info for local variables in function 'OutWord'
040E           1266   ;------------------------------------------------------------
040E           1267   ;x                         Allocated to registers r2 r3 
040E           1268   ;------------------------------------------------------------
040E           1269   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:342: void OutWord (unsigned int x)
040E           1270   ;        -----------------------------------------
040E           1271   ;         function OutWord
040E           1272   ;        -----------------------------------------
040E           1273   _OutWord:
040E AA82      1274            mov     r2,dpl
0410 AB83      1275            mov     r3,dph
0412           1276   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:344: OutByte(x/0x100);
0412 8B04      1277            mov     ar4,r3
0414 8C82      1278            mov     dpl,r4
0416 C002      1279            push    ar2
0418 C003      1280            push    ar3
041A 120100    1281            lcall   _OutByte
041D D003      1282            pop     ar3
041F D002      1283            pop     ar2
0421           1284   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:345: OutByte(x%0x100);
0421 8A82      1285            mov     dpl,r2
0423 020100    1286            ljmp    _OutByte
0426           1287   ;------------------------------------------------------------
0426           1288   ;Allocation info for local variables in function 'read_hex_in'
0426           1289   ;------------------------------------------------------------
0426           1290   ;swa                       Allocated to registers r3 
0426           1291   ;swb                       Allocated to registers r4 
0426           1292   ;toret                     Allocated to registers r2 
0426           1293   ;------------------------------------------------------------
0426           1294   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:348: unsigned char read_hex_in(void)
0426           1295   ;        -----------------------------------------
0426           1296   ;         function read_hex_in
0426           1297   ;        -----------------------------------------
0426           1298   _read_hex_in:
0426           1299   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:353: toret=0xff;
0426 7AFF      1300            mov     r2,#0xFF
0428           1301   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:355: swa=SWA;
0428 ABE8      1302            mov     r3,_SWA
042A           1303   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:356: swb=SWB;
042A AC95      1304            mov     r4,_SWB
042C           1305   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:358: LEDRA=swa;
042C 8BE8      1306            mov     _LEDRA,r3
042E           1307   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:359: LEDRB=swb;
042E 8C95      1308            mov     _LEDRB,r4
0430           1309   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:361: if(swa!=0)
0430 EB        1310            mov     a,r3
0431 6001      1311            jz      L021056?
0433           1312   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:363: if(swa&0x01) toret=0x0;
0433 EB        1313            mov     a,r3
0434 30E0E8    1314            jnb     acc.0,L021022?
0437 7A00      1315            mov     r2,#0x00
0439 8001      1316            sjmp    L021024?
043B           1317   L021022?:
043B           1318   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:364: else if(swa&0x02) toret=0x1;
043B EB        1319            mov     a,r3
043C 30E168    1320            jnb     acc.1,L021019?
043F 7A01      1321            mov     r2,#0x01
0441 8001      1322            sjmp    L021024?
0443           1323   L021019?:
0443           1324   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:365: else if(swa&0x04) toret=0x2;
0443 EB        1325            mov     a,r3
0444 30E2A8    1326            jnb     acc.2,L021016?
0447 7A02      1327            mov     r2,#0x02
0449 8001      1328            sjmp    L021024?
044B           1329   L021016?:
044B           1330   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:366: else if(swa&0x08) toret=0x3;
044B EB        1331            mov     a,r3
044C 30E3E8    1332            jnb     acc.3,L021013?
044F 7A03      1333            mov     r2,#0x03
0451 8001      1334            sjmp    L021024?
0453           1335   L021013?:
0453           1336   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:367: else if(swa&0x10) toret=0x4;
0453 EB        1337            mov     a,r3
0454 30E428    1338            jnb     acc.4,L021010?
0457 7A04      1339            mov     r2,#0x04
0459 8001      1340            sjmp    L021024?
045B           1341   L021010?:
045B           1342   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:368: else if(swa&0x20) toret=0x5;
045B EB        1343            mov     a,r3
045C 30E568    1344            jnb     acc.5,L021007?
045F 7A05      1345            mov     r2,#0x05
0461 8001      1346            sjmp    L021024?
0463           1347   L021007?:
0463           1348   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:369: else if(swa&0x40) toret=0x6;
0463 EB        1349            mov     a,r3
0464 30E6A8    1350            jnb     acc.6,L021004?
0467 7A06      1351            mov     r2,#0x06
0469 8001      1352            sjmp    L021024?
046B           1353   L021004?:
046B           1354   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:370: else if(swa&0x80) toret=0x7;
046B EB        1355            mov     a,r3
046C 30E728    1356            jnb     acc.7,L021024?
046F 7A07      1357            mov     r2,#0x07
0471           1358   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:371: while (SWA!=0);
0471           1359   L021024?:
0471 E5E8      1360            mov     a,_SWA
0473 6001      1361            jz      L021057?
0475 8001      1362            sjmp    L021024?
0477           1363   L021056?:
0477           1364   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:373: else if(swb!=0)
0477 EC        1365            mov     a,r4
0478 6001      1366            jz      L021057?
047A           1367   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:375: if(swb&0x01) toret=0x8;
047A EC        1368            mov     a,r4
047B 30E028    1369            jnb     acc.0,L021048?
047E 7A08      1370            mov     r2,#0x08
0480 8001      1371            sjmp    L021050?
0482           1372   L021048?:
0482           1373   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:376: else if(swb&0x02) toret=0x9;
0482 EC        1374            mov     a,r4
0483 30E1A8    1375            jnb     acc.1,L021045?
0486 7A09      1376            mov     r2,#0x09
0488 8001      1377            sjmp    L021050?
048A           1378   L021045?:
048A           1379   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:377: else if(swb&0x04) toret=0xa;
048A EC        1380            mov     a,r4
048B 30E2E8    1381            jnb     acc.2,L021042?
048E 7A0A      1382            mov     r2,#0x0A
0490 8001      1383            sjmp    L021050?
0492           1384   L021042?:
0492           1385   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:378: else if(swb&0x08) toret=0xb;
0492 EC        1386            mov     a,r4
0493 30E328    1387            jnb     acc.3,L021039?
0496 7A0B      1388            mov     r2,#0x0B
0498 8001      1389            sjmp    L021050?
049A           1390   L021039?:
049A           1391   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:379: else if(swb&0x10) toret=0xc;
049A EC        1392            mov     a,r4
049B 30E468    1393            jnb     acc.4,L021036?
049E 7A0C      1394            mov     r2,#0x0C
04A0 8001      1395            sjmp    L021050?
04A2           1396   L021036?:
04A2           1397   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:380: else if(swb&0x20) toret=0xd;
04A2 EC        1398            mov     a,r4
04A3 30E5A8    1399            jnb     acc.5,L021033?
04A6 7A0D      1400            mov     r2,#0x0D
04A8 8001      1401            sjmp    L021050?
04AA           1402   L021033?:
04AA           1403   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:381: else if(swb&0x40) toret=0xe;
04AA EC        1404            mov     a,r4
04AB 30E6E8    1405            jnb     acc.6,L021030?
04AE 7A0E      1406            mov     r2,#0x0E
04B0 8001      1407            sjmp    L021050?
04B2           1408   L021030?:
04B2           1409   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:382: else if(swb&0x80) toret=0xf;
04B2 EC        1410            mov     a,r4
04B3 30E768    1411            jnb     acc.7,L021050?
04B6 7A0F      1412            mov     r2,#0x0F
04B8           1413   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:383: while (SWB!=0);
04B8           1414   L021050?:
04B8 E595      1415            mov     a,_SWB
04BA 7001      1416            jnz     L021050?
04BC           1417   L021057?:
04BC           1418   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:386: return toret;
04BC 8A82      1419            mov     dpl,r2
04BE 22        1420            ret
04BF           1421   ;------------------------------------------------------------
04BF           1422   ;Allocation info for local variables in function 'Manual_Load'
04BF           1423   ;------------------------------------------------------------
04BF           1424   ;add                       Allocated to registers r2 r3 
04BF           1425   ;j                         Allocated to registers r4 r5 
04BF           1426   ;x                         Allocated to registers r5 
04BF           1427   ;val                       Allocated to registers r4 
04BF           1428   ;h_add                     Allocated to registers r4 
04BF           1429   ;l_add                     Allocated to registers r5 
04BF           1430   ;------------------------------------------------------------
04BF           1431   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:392: void Manual_Load (void)
04BF           1432   ;        -----------------------------------------
04BF           1433   ;         function Manual_Load
04BF           1434   ;        -----------------------------------------
04BF           1435   _Manual_Load:
04BF           1436   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:398: while(KEY_3==0);
04BF           1437   L022001?:
04BF 30FB28    1438            jnb     _KEY_3,L022001?
04C2           1439   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:399: while(KEY_2==0);
04C2           1440   L022004?:
04C2 30FA68    1441            jnb     _KEY_2,L022004?
04C5           1442   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:402: XRAMUSEDAS=0x01; // 32k RAM accessed as xdata
04C5 75C301    1443            mov     _XRAMUSEDAS,#0x01
04C8           1444   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:403: FLASH_ADD2=FLASHSECTOR;
04C8 75E301    1445            mov     _FLASH_ADD2,#0x01
04CB           1446   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:404: FLASH_MOD=0x00; // Set data port for input
04CB 75DD00    1447            mov     _FLASH_MOD,#0x00
04CE           1448   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:419: _endasm;
04CE           1449            
04CE 900000    1450              mov dptr, #0
04D1 75DB0F    1451              mov _FLASH_CMD, #0FH
04D4           1452             Load_Ram_Loop2:
04D4 8582E1    1453              mov _FLASH_ADD0, dpl
04D7 8583E2    1454              mov _FLASH_ADD1, dph
04DA 75DB07    1455              mov _FLASH_CMD, #00000111B
04DD 75DB03    1456              mov _FLASH_CMD, #00000011B
04E0 E5DC      1457              mov a, _FLASH_DATA
04E2 75DB0F    1458              mov _FLASH_CMD, #00001111B
04E5 F0        1459              movx @dptr, a
04E6 A3        1460              inc dptr
04E7 E583      1461              mov a, dph
04E9 30E7A8    1462              jnb acc.7, Load_Ram_Loop2
04EC           1463             
04EC           1464   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:421: add=0;
04EC 7A00      1465            mov     r2,#0x00
04EE 7B00      1466            mov     r3,#0x00
04F0           1467   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:423: while(1)
04F0           1468   L022034?:
04F0           1469   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:426: h_add=add/0x100;
04F0 8B04      1470            mov     ar4,r3
04F2           1471   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:427: l_add=add%0x100;
04F2 8A05      1472            mov     ar5,r2
04F4           1473   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:428: HEX3=seven_seg[h_add/0x10];
04F4 EC        1474            mov     a,r4
04F5 C4        1475            swap    a
04F6 540F      1476            anl     a,#0x0f
04F8 9012D0    1477            mov     dptr,#_seven_seg
04FB 93        1478            movc    a,@a+dptr
04FC F594      1479            mov     _HEX3,a
04FE           1480   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:429: HEX2=seven_seg[h_add%0x10];
04FE 740F      1481            mov     a,#0x0F
0500 5C        1482            anl     a,r4
0501 9012D0    1483            mov     dptr,#_seven_seg
0504 93        1484            movc    a,@a+dptr
0505 F593      1485            mov     _HEX2,a
0507           1486   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:430: HEX1=seven_seg[l_add/0x10];
0507 ED        1487            mov     a,r5
0508 C4        1488            swap    a
0509 540F      1489            anl     a,#0x0f
050B 9012D0    1490            mov     dptr,#_seven_seg
050E 93        1491            movc    a,@a+dptr
050F F592      1492            mov     _HEX1,a
0511           1493   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:431: HEX0=seven_seg[l_add%0x10];
0511 740F      1494            mov     a,#0x0F
0513 5D        1495            anl     a,r5
0514 9012D0    1496            mov     dptr,#_seven_seg
0517 93        1497            movc    a,@a+dptr
0518 F591      1498            mov     _HEX0,a
051A           1499   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:433: val=Read_XRAM(add);
051A 8A82      1500            mov     dpl,r2
051C 8B83      1501            mov     dph,r3
051E C002      1502            push    ar2
0520 C003      1503            push    ar3
0522 120100    1504            lcall   _Read_XRAM
0525 AC82      1505            mov     r4,dpl
0527           1506   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:434: HEX4=seven_seg[val%0x10];
0527 740F      1507            mov     a,#0x0F
0529 5C        1508            anl     a,r4
052A 9012D0    1509            mov     dptr,#_seven_seg
052D 93        1510            movc    a,@a+dptr
052E F58E      1511            mov     _HEX4,a
0530           1512   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:435: HEX5=seven_seg[val/0x10];
0530 EC        1513            mov     a,r4
0531 C4        1514            swap    a
0532 540F      1515            anl     a,#0x0f
0534 9012D0    1516            mov     dptr,#_seven_seg
0537 93        1517            movc    a,@a+dptr
0538 F58F      1518            mov     _HEX5,a
053A           1519   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:437: x=read_hex_in();
053A C004      1520            push    ar4
053C 120100    1521            lcall   _read_hex_in
053F AD82      1522            mov     r5,dpl
0541 D004      1523            pop     ar4
0543 D003      1524            pop     ar3
0545 D002      1525            pop     ar2
0547           1526   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:438: if(x<0x10)
0547 BD1028    1527            cjne    r5,#0x10,L022061?
054A           1528   L022061?:
054A 5001      1529            jnc     L022011?
054C           1530   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:440: if(SWC&0x01) // Reading address
054C E59E      1531            mov     a,_SWC
054E 30E0A8    1532            jnb     acc.0,L022008?
0551           1533   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:442: add<<=4;
0551 EB        1534            mov     a,r3
0552 C4        1535            swap    a
0553 54F0      1536            anl     a,#0xf0
0555 CA        1537            xch     a,r2
0556 C4        1538            swap    a
0557 CA        1539            xch     a,r2
0558 6A        1540            xrl     a,r2
0559 CA        1541            xch     a,r2
055A 54F0      1542            anl     a,#0xf0
055C CA        1543            xch     a,r2
055D 6A        1544            xrl     a,r2
055E FB        1545            mov     r3,a
055F           1546   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:443: add&=0x7ff0;
055F 5302F0    1547            anl     ar2,#0xF0
0562 53037F    1548            anl     ar3,#0x7F
0565           1549   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:444: add|=x;        
0565 8D06      1550            mov     ar6,r5
0567 7F00      1551            mov     r7,#0x00
0569 EE        1552            mov     a,r6
056A 4202      1553            orl     ar2,a
056C EF        1554            mov     a,r7
056D 4203      1555            orl     ar3,a
056F 8001      1556            sjmp    L022011?
0571           1557   L022008?:
0571           1558   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:448: val<<=4;
0571 EC        1559            mov     a,r4
0572 C4        1560            swap    a
0573 54F0      1561            anl     a,#0xf0
0575 FC        1562            mov     r4,a
0576           1563   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:449: val&=0xf0;
0576 5304F0    1564            anl     ar4,#0xF0
0579           1565   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:450: val|=x;
0579 ED        1566            mov     a,r5
057A 4204      1567            orl     ar4,a
057C           1568   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:451: Write_XRAM(add, val);
057C 8C40      1569            mov     _Write_XRAM_PARM_2,r4
057E 8A82      1570            mov     dpl,r2
0580 8B83      1571            mov     dph,r3
0582 C002      1572            push    ar2
0584 C003      1573            push    ar3
0586 120100    1574            lcall   _Write_XRAM
0589 D003      1575            pop     ar3
058B D002      1576            pop     ar2
058D           1577   L022011?:
058D           1578   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:455: if(KEY_3==0) // Increment address
058D 20FBE8    1579            jb      _KEY_3,L022031?
0590           1580   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:457: while(KEY_3==0); // Wait for key release
0590           1581   L022012?:
0590 30FB28    1582            jnb     _KEY_3,L022012?
0593           1583   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:458: LEDG_1=0;
0593 C2F9      1584            clr     _LEDG_1
0595           1585   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:459: LEDG_2=0;
0595 C2FA      1586            clr     _LEDG_2
0597           1587   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:460: add++;
0597 0A        1588            inc     r2
0598 BA0068    1589            cjne    r2,#0x00,L022066?
059B 0B        1590            inc     r3
059C           1591   L022066?:
059C           1592   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:461: if (add>0x7fff) add=0;
059C C3        1593            clr     c
059D 74FF      1594            mov     a,#0xFF
059F 9A        1595            subb    a,r2
05A0 747F      1596            mov     a,#0x7F
05A2 9B        1597            subb    a,r3
05A3 4001      1598            jc      L022067?
05A5 020100    1599            ljmp    L022034?
05A8           1600   L022067?:
05A8 7A00      1601            mov     r2,#0x00
05AA 7B00      1602            mov     r3,#0x00
05AC 020100    1603            ljmp    L022034?
05AF           1604   L022031?:
05AF           1605   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:463: else if (KEY_2==0) // Decrement address
05AF 20FAE8    1606            jb      _KEY_2,L022028?
05B2           1607   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:465: while(KEY_2==0); // Wait for key release
05B2           1608   L022017?:
05B2 30FA28    1609            jnb     _KEY_2,L022017?
05B5           1610   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:466: LEDG_1=0;
05B5 C2F9      1611            clr     _LEDG_1
05B7           1612   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:467: LEDG_2=0;
05B7 C2FA      1613            clr     _LEDG_2
05B9           1614   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:468: add--;
05B9 1A        1615            dec     r2
05BA BAFF68    1616            cjne    r2,#0xff,L022070?
05BD 1B        1617            dec     r3
05BE           1618   L022070?:
05BE           1619   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:469: if (add>0x7fff) add=0x7fff;
05BE C3        1620            clr     c
05BF 74FF      1621            mov     a,#0xFF
05C1 9A        1622            subb    a,r2
05C2 747F      1623            mov     a,#0x7F
05C4 9B        1624            subb    a,r3
05C5 4001      1625            jc      L022071?
05C7 020100    1626            ljmp    L022034?
05CA           1627   L022071?:
05CA 7AFF      1628            mov     r2,#0xFF
05CC 7B7F      1629            mov     r3,#0x7F
05CE 020100    1630            ljmp    L022034?
05D1           1631   L022028?:
05D1           1632   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:471: else if (KEY_1==0) // Save RAM to flash
05D1 30F9E8    1633            jnb     _KEY_1,L022072?
05D4 020100    1634            ljmp    L022034?
05D7           1635   L022072?:
05D7           1636   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:473: while(KEY_1==0); // Wait for key release
05D7           1637   L022022?:
05D7 30F928    1638            jnb     _KEY_1,L022022?
05DA           1639   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:474: EraseSector();
05DA C002      1640            push    ar2
05DC C003      1641            push    ar3
05DE 120100    1642            lcall   _EraseSector
05E1 D003      1643            pop     ar3
05E3 D002      1644            pop     ar2
05E5           1645   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:475: LEDG_1=1;
05E5 D2F9      1646            setb    _LEDG_1
05E7           1647   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:476: for(j=0; j<0x8000; j++)
05E7 7C00      1648            mov     r4,#0x00
05E9 7D00      1649            mov     r5,#0x00
05EB           1650   L022036?:
05EB 7480      1651            mov     a,#0x100 - 0x80
05ED 2D        1652            add     a,r5
05EE 4001      1653            jc      L022039?
05F0           1654   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:478: val=Read_XRAM(j);
05F0 8C82      1655            mov     dpl,r4
05F2 8D83      1656            mov     dph,r5
05F4 C002      1657            push    ar2
05F6 C003      1658            push    ar3
05F8 C004      1659            push    ar4
05FA C005      1660            push    ar5
05FC 120100    1661            lcall   _Read_XRAM
05FF 858250    1662            mov     _FlashByte_PARM_2,dpl
0602 D005      1663            pop     ar5
0604 D004      1664            pop     ar4
0606           1665   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:479: FlashByte(j, val);
0606 8C82      1666            mov     dpl,r4
0608 8D83      1667            mov     dph,r5
060A C004      1668            push    ar4
060C C005      1669            push    ar5
060E 120100    1670            lcall   _FlashByte
0611 D005      1671            pop     ar5
0613 D004      1672            pop     ar4
0615 D003      1673            pop     ar3
0617 D002      1674            pop     ar2
0619           1675   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:476: for(j=0; j<0x8000; j++)
0619 0C        1676            inc     r4
061A BC0068    1677            cjne    r4,#0x00,L022036?
061D 0D        1678            inc     r5
061E 8001      1679            sjmp    L022036?
0620           1680   L022039?:
0620           1681   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:481: LEDG_2=1;
0620 D2FA      1682            setb    _LEDG_2
0622 020100    1683            ljmp    L022034?
0625           1684   ;------------------------------------------------------------
0625           1685   ;Allocation info for local variables in function 'main'
0625           1686   ;------------------------------------------------------------
0625           1687   ;i                         Allocated with name '_main_i_1_129'
0625           1688   ;j                         Allocated to registers r2 r3 
0625           1689   ;d                         Allocated to registers r2 
0625           1690   ;ascii                     Allocated with name '_main_ascii_1_129'
0625           1691   ;------------------------------------------------------------
0625           1692   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:486: void main (void)
0625           1693   ;        -----------------------------------------
0625           1694   ;         function main
0625           1695   ;        -----------------------------------------
0625           1696   _main:
0625           1697   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:492: FLASH_CMD=0x0f;
0625 75DB0F    1698            mov     _FLASH_CMD,#0x0F
0628           1699   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:494: if(KEY_1==1) Load_Ram_Fast();
0628 30F9E8    1700            jnb     _KEY_1,L023002?
062B 120100    1701            lcall   _Load_Ram_Fast
062E           1702   L023002?:
062E           1703   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:496: XRAMUSEDAS=1; // 32k RAM accessed as xdata
062E 75C301    1704            mov     _XRAMUSEDAS,#0x01
0631           1705   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:498: while(KEY_1==0); // Wait for key release
0631           1706   L023003?:
0631 30F928    1707            jnb     _KEY_1,L023003?
0634           1708   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:500: LEDRA=0;
0634 75E800    1709            mov     _LEDRA,#0x00
0637           1710   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:501: LEDRB=0;
0637 759500    1711            mov     _LEDRB,#0x00
063A           1712   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:502: LEDRC=0;
063A 759E00    1713            mov     _LEDRC,#0x00
063D           1714   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:503: LEDG=1; // Bootloader running
063D 75F801    1715            mov     _LEDG,#0x01
0640           1716   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:504: HEX0=0xff;
0640 7591FF    1717            mov     _HEX0,#0xFF
0643           1718   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:505: HEX1=0xff;
0643 7592FF    1719            mov     _HEX1,#0xFF
0646           1720   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:506: HEX2=0xff;
0646 7593FF    1721            mov     _HEX2,#0xFF
0649           1722   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:507: HEX3=0xff;
0649 7594FF    1723            mov     _HEX3,#0xFF
064C           1724   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:508: HEX4=0xff;
064C 758EFF    1725            mov     _HEX4,#0xFF
064F           1726   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:509: HEX5=0xff;
064F 758FFF    1727            mov     _HEX5,#0xFF
0652           1728   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:510: HEX6=0xff;
0652 7596FF    1729            mov     _HEX6,#0xFF
0655           1730   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:511: HEX7=0xff;
0655 7597FF    1731            mov     _HEX7,#0xFF
0658           1732   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:513: inituart();
0658 120100    1733            lcall   _inituart
065B           1734   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:514: JRXEN=1;
065B D2C2      1735            setb    _JRXEN
065D           1736   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:515: JBUF=0;
065D 75C100    1737            mov     _JBUF,#0x00
0660           1738   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:516: JTXEN=1;
0660 D2C3      1739            setb    _JTXEN
0662           1740   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:519: while(1)
0662           1741   L023021?:
0662           1742   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:521: if (JRXRDY==1)
0662 30C0A8    1743            jnb     _JRXRDY,L023012?
0665           1744   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:523: d=JBUF; // Read fifo value
0665 AAC1      1745            mov     r2,_JBUF
0667           1746   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:524: if(d==(unsigned char)'U')
0667 BA55E8    1747            cjne    r2,#0x55,L023008?
066A           1748   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:526: LEDG_7=1;
066A D2FF      1749            setb    _LEDG_7
066C           1750   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:527: serialmode=1; // Use JTAG for communication
066C D250      1751            setb    _serialmode
066E           1752   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:528: break;
066E           1753   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:530: while(JTXRDY!=1);
066E 8001      1754            sjmp    L023022?
0670           1755   L023008?:
0670 30C1E8    1756            jnb     _JTXRDY,L023008?
0673           1757   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:531: JBUF=d; // Echo what was received
0673 8AC1      1758            mov     _JBUF,r2
0675           1759   L023012?:
0675           1760   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:533: if (RI==1)
0675 309868    1761            jnb     _RI,L023016?
0678           1762   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:535: d=SBUF;
0678 AA99      1763            mov     r2,_SBUF
067A           1764   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:536: RI=0;
067A C298      1765            clr     _RI
067C           1766   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:537: if(d==(unsigned char)'U')
067C BA55A8    1767            cjne    r2,#0x55,L023014?
067F           1768   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:539: serialmode=0; // Use serial port for communication
067F C250      1769            clr     _serialmode
0681           1770   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:540: break;
0681 8001      1771            sjmp    L023022?
0683           1772   L023014?:
0683           1773   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:542: TI=0; // Echo what was received
0683 C299      1774            clr     _TI
0685           1775   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:543: SBUF=d;
0685 8A99      1776            mov     _SBUF,r2
0687           1777   L023016?:
0687           1778   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:545: if ((KEY_2==0) && (KEY_3==0)) Manual_Load();
0687 20FA68    1779            jb      _KEY_2,L023021?
068A 20FB68    1780            jb      _KEY_3,L023021?
068D 120100    1781            lcall   _Manual_Load
0690 8001      1782            sjmp    L023021?
0692           1783   L023022?:
0692           1784   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:548: loadintelhex();
0692 120100    1785            lcall   _loadintelhex
0695           1786   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:550: serialmode=0; // Use serial port for communication
0695 C250      1787            clr     _serialmode
0697           1788   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:551: getchar_echo=1;
0697 D2D0      1789            setb    _getchar_echo
0699           1790   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:552: sends("\nReady for commands (Dump, Program, Erase, Strin, Testcode)\n");
0699 909FE8    1791            mov     dptr,#__str_1
069C 75F080    1792            mov     b,#0x80
069F 120100    1793            lcall   _sends
06A2           1794   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:553: while(1)
06A2           1795   L023054?:
06A2           1796   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:555: sends(">");
06A2 90A068    1797            mov     dptr,#__str_2
06A5 75F080    1798            mov     b,#0x80
06A8 120100    1799            lcall   _sends
06AB           1800   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:556: gets(buff);
06AB 901990    1801            mov     dptr,#_buff
06AE 75F040    1802            mov     b,#0x40
06B1 120100    1803            lcall   _gets
06B4           1804   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:557: if(EQ(buff, "D")||EQ(buff, "d"))
06B4 750028    1805            mov     _strcmp_PARM_2,#__str_3
06B7 7501A1    1806            mov     (_strcmp_PARM_2 + 1),#(__str_3 >> 8)
06BA 750280    1807            mov     (_strcmp_PARM_2 + 2),#0x80
06BD 901990    1808            mov     dptr,#_buff
06C0 75F040    1809            mov     b,#0x40
06C3 120100    1810            lcall   _strcmp
06C6 E582      1811            mov     a,dpl
06C8 8583F0    1812            mov     b,dph
06CB 45F0      1813            orl     a,b
06CD 6001      1814            jz      L023049?
06CF 7500E8    1815            mov     _strcmp_PARM_2,#__str_4
06D2 7501A1    1816            mov     (_strcmp_PARM_2 + 1),#(__str_4 >> 8)
06D5 750280    1817            mov     (_strcmp_PARM_2 + 2),#0x80
06D8 901990    1818            mov     dptr,#_buff
06DB 75F040    1819            mov     b,#0x40
06DE 120100    1820            lcall   _strcmp
06E1 E582      1821            mov     a,dpl
06E3 8583F0    1822            mov     b,dph
06E6 45F0      1823            orl     a,b
06E8 6001      1824            jz      L023113?
06EA 020100    1825            ljmp    L023050?
06ED           1826   L023113?:
06ED           1827   L023049?:
06ED           1828   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:559: sends("Address: ");
06ED 90A2A8    1829            mov     dptr,#__str_5
06F0 75F080    1830            mov     b,#0x80
06F3 120100    1831            lcall   _sends
06F6           1832   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:560: gets(buff);
06F6 901990    1833            mov     dptr,#_buff
06F9 75F040    1834            mov     b,#0x40
06FC 120100    1835            lcall   _gets
06FF           1836   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:561: i=str2hex(buff)&0xfff0;
06FF 901990    1837            mov     dptr,#_buff
0702 75F040    1838            mov     b,#0x40
0705 120100    1839            lcall   _str2hex
0708 E582      1840            mov     a,dpl
070A 8583F0    1841            mov     b,dph
070D 54F0      1842            anl     a,#0xF0
070F F530      1843            mov     _main_i_1_129,a
0711 85F031    1844            mov     (_main_i_1_129 + 1),b
0714           1845   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:562: for(j=0; j<0x80; j++)
0714 7D00      1846            mov     r5,#0x00
0716 7E00      1847            mov     r6,#0x00
0718           1848   L023056?:
0718 C3        1849            clr     c
0719 ED        1850            mov     a,r5
071A 9480      1851            subb    a,#0x80
071C EE        1852            mov     a,r6
071D 9400      1853            subb    a,#0x00
071F 4001      1854            jc      L023114?
0721 020100    1855            ljmp    L023059?
0724           1856   L023114?:
0724           1857   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:564: if((j%0x10)==0)
0724 ED        1858            mov     a,r5
0725 540F      1859            anl     a,#0x0F
0727 7001      1860            jnz     L023024?
0729           1861   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:566: OutWord(j+i);
0729 E530      1862            mov     a,_main_i_1_129
072B 2D        1863            add     a,r5
072C F582      1864            mov     dpl,a
072E E531      1865            mov     a,(_main_i_1_129 + 1)
0730 3E        1866            addc    a,r6
0731 F583      1867            mov     dph,a
0733 C005      1868            push    ar5
0735 C006      1869            push    ar6
0737 120100    1870            lcall   _OutWord
073A           1871   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:567: putchar(':');
073A 75823A    1872            mov     dpl,#0x3A
073D 120100    1873            lcall   _putchar
0740 D006      1874            pop     ar6
0742 D005      1875            pop     ar5
0744           1876   L023024?:
0744           1877   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:569: d=*((unsigned char xdata *)(j+i));
0744 E530      1878            mov     a,_main_i_1_129
0746 2D        1879            add     a,r5
0747 FF        1880            mov     r7,a
0748 E531      1881            mov     a,(_main_i_1_129 + 1)
074A 3E        1882            addc    a,r6
074B FB        1883            mov     r3,a
074C 8F82      1884            mov     dpl,r7
074E 8B83      1885            mov     dph,r3
0750 E0        1886            movx    a,@dptr
0751           1887   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:570: OutByte(d);
0751 FA        1888            mov     r2,a
0752 F582      1889            mov     dpl,a
0754 C002      1890            push    ar2
0756 C005      1891            push    ar5
0758 C006      1892            push    ar6
075A 120100    1893            lcall   _OutByte
075D           1894   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:571: putchar(':');
075D 75823A    1895            mov     dpl,#0x3A
0760 120100    1896            lcall   _putchar
0763 D006      1897            pop     ar6
0765 D005      1898            pop     ar5
0767 D002      1899            pop     ar2
0769           1900   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:572: if((d>0x20)&&(d<0x7f))
0769 EA        1901            mov     a,r2
076A 24DF      1902            add     a,#0xff - 0x20
076C 5001      1903            jnc     L023026?
076E BA7F28    1904            cjne    r2,#0x7F,L023118?
0771           1905   L023118?:
0771 5001      1906            jnc     L023026?
0773           1907   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:573: ascii[j&0xf]=d;
0773 740F      1908            mov     a,#0x0F
0775 5D        1909            anl     a,r5
0776 FB        1910            mov     r3,a
0777 7C00      1911            mov     r4,#0x00
0779 24D0      1912            add     a,#_main_ascii_1_129
077B F8        1913            mov     r0,a
077C A602      1914            mov     @r0,ar2
077E 8001      1915            sjmp    L023027?
0780           1916   L023026?:
0780           1917   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:575: ascii[j&0xf]='.';
0780 740F      1918            mov     a,#0x0F
0782 5D        1919            anl     a,r5
0783 FA        1920            mov     r2,a
0784 7B00      1921            mov     r3,#0x00
0786 24D0      1922            add     a,#_main_ascii_1_129
0788 F8        1923            mov     r0,a
0789 762E      1924            mov     @r0,#0x2E
078B           1925   L023027?:
078B           1926   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:576: if((j&0xf)==0xf)
078B 740F      1927            mov     a,#0x0F
078D 5D        1928            anl     a,r5
078E FA        1929            mov     r2,a
078F 7B00      1930            mov     r3,#0x00
0791 BA0FA8    1931            cjne    r2,#0x0F,L023058?
0794 BB00A8    1932            cjne    r3,#0x00,L023058?
0797           1933   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:578: ascii[0x10]=0;
0797 78E0      1934            mov     r0,#(_main_ascii_1_129 + 0x0010)
0799 7600      1935            mov     @r0,#0x00
079B           1936   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:579: sends("  ");
079B 90A4E8    1937            mov     dptr,#__str_6
079E 75F080    1938            mov     b,#0x80
07A1 C005      1939            push    ar5
07A3 C006      1940            push    ar6
07A5 120100    1941            lcall   _sends
07A8           1942   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:580: sends(ascii);
07A8 9082D0    1943            mov     dptr,#_main_ascii_1_129
07AB 75F040    1944            mov     b,#0x40
07AE 120100    1945            lcall   _sends
07B1           1946   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:581: putchar('\n');
07B1 75820A    1947            mov     dpl,#0x0A
07B4 120100    1948            lcall   _putchar
07B7 D006      1949            pop     ar6
07B9 D005      1950            pop     ar5
07BB           1951   L023058?:
07BB           1952   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:562: for(j=0; j<0x80; j++)
07BB 0D        1953            inc     r5
07BC BD0028    1954            cjne    r5,#0x00,L023122?
07BF 0E        1955            inc     r6
07C0           1956   L023122?:
07C0 020100    1957            ljmp    L023056?
07C3           1958   L023059?:
07C3           1959   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:585: putchar('\n');
07C3 75820A    1960            mov     dpl,#0x0A
07C6 120100    1961            lcall   _putchar
07C9 020100    1962            ljmp    L023054?
07CC           1963   L023050?:
07CC           1964   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:587: else if(EQ(buff, "P")||EQ(buff, "p"))
07CC 750068    1965            mov     _strcmp_PARM_2,#__str_7
07CF 7501A5    1966            mov     (_strcmp_PARM_2 + 1),#(__str_7 >> 8)
07D2 750280    1967            mov     (_strcmp_PARM_2 + 2),#0x80
07D5 901990    1968            mov     dptr,#_buff
07D8 75F040    1969            mov     b,#0x40
07DB 120100    1970            lcall   _strcmp
07DE E582      1971            mov     a,dpl
07E0 8583F0    1972            mov     b,dph
07E3 45F0      1973            orl     a,b
07E5 6001      1974            jz      L023045?
07E7 7500E8    1975            mov     _strcmp_PARM_2,#__str_8
07EA 7501A5    1976            mov     (_strcmp_PARM_2 + 1),#(__str_8 >> 8)
07ED 750280    1977            mov     (_strcmp_PARM_2 + 2),#0x80
07F0 901990    1978            mov     dptr,#_buff
07F3 75F040    1979            mov     b,#0x40
07F6 120100    1980            lcall   _strcmp
07F9 E582      1981            mov     a,dpl
07FB 8583F0    1982            mov     b,dph
07FE 45F0      1983            orl     a,b
0800 7001      1984            jnz     L023046?
0802           1985   L023045?:
0802           1986   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:589: sends("Address: ");
0802 90A2A8    1987            mov     dptr,#__str_5
0805 75F080    1988            mov     b,#0x80
0808 120100    1989            lcall   _sends
080B           1990   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:590: gets(buff);
080B 901990    1991            mov     dptr,#_buff
080E 75F040    1992            mov     b,#0x40
0811 120100    1993            lcall   _gets
0814           1994   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:591: i=str2hex(buff);
0814 901990    1995            mov     dptr,#_buff
0817 75F040    1996            mov     b,#0x40
081A 120100    1997            lcall   _str2hex
081D 858230    1998            mov     _main_i_1_129,dpl
0820 858331    1999            mov     (_main_i_1_129 + 1),dph
0823           2000   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:592: sends("Data: ");
0823 90A668    2001            mov     dptr,#__str_9
0826 75F080    2002            mov     b,#0x80
0829 120100    2003            lcall   _sends
082C           2004   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:593: gets(buff);
082C 901990    2005            mov     dptr,#_buff
082F 75F040    2006            mov     b,#0x40
0832 120100    2007            lcall   _gets
0835           2008   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:594: d=str2hex(buff)&0xff;
0835 901990    2009            mov     dptr,#_buff
0838 75F040    2010            mov     b,#0x40
083B 120100    2011            lcall   _str2hex
083E E582      2012            mov     a,dpl
0840 8583F0    2013            mov     b,dph
0843 FA        2014            mov     r2,a
0844 8A50      2015            mov     _FlashByte_PARM_2,r2
0846           2016   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:595: FlashByte(i, d);
0846 853082    2017            mov     dpl,_main_i_1_129
0849 853183    2018            mov     dph,(_main_i_1_129 + 1)
084C 120100    2019            lcall   _FlashByte
084F 020100    2020            ljmp    L023054?
0852           2021   L023046?:
0852           2022   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:597: else if(EQ(buff, "E")||EQ(buff, "e"))
0852 7500A8    2023            mov     _strcmp_PARM_2,#__str_10
0855 7501A6    2024            mov     (_strcmp_PARM_2 + 1),#(__str_10 >> 8)
0858 750280    2025            mov     (_strcmp_PARM_2 + 2),#0x80
085B 901990    2026            mov     dptr,#_buff
085E 75F040    2027            mov     b,#0x40
0861 120100    2028            lcall   _strcmp
0864 E582      2029            mov     a,dpl
0866 8583F0    2030            mov     b,dph
0869 45F0      2031            orl     a,b
086B 6001      2032            jz      L023041?
086D 750028    2033            mov     _strcmp_PARM_2,#__str_11
0870 7501A7    2034            mov     (_strcmp_PARM_2 + 1),#(__str_11 >> 8)
0873 750280    2035            mov     (_strcmp_PARM_2 + 2),#0x80
0876 901990    2036            mov     dptr,#_buff
0879 75F040    2037            mov     b,#0x40
087C 120100    2038            lcall   _strcmp
087F E582      2039            mov     a,dpl
0881 8583F0    2040            mov     b,dph
0884 45F0      2041            orl     a,b
0886 7001      2042            jnz     L023042?
0888           2043   L023041?:
0888           2044   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:599: sends("Should erase Flash memory? (y/n)");
0888 90A7A8    2045            mov     dptr,#__str_12
088B 75F080    2046            mov     b,#0x80
088E 120100    2047            lcall   _sends
0891           2048   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:600: gets(buff);
0891 901990    2049            mov     dptr,#_buff
0894 75F040    2050            mov     b,#0x40
0897 120100    2051            lcall   _gets
089A           2052   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:601: if(EQ(buff, "y"))
089A 7500E8    2053            mov     _strcmp_PARM_2,#__str_13
089D 7501A7    2054            mov     (_strcmp_PARM_2 + 1),#(__str_13 >> 8)
08A0 750280    2055            mov     (_strcmp_PARM_2 + 2),#0x80
08A3 901990    2056            mov     dptr,#_buff
08A6 75F040    2057            mov     b,#0x40
08A9 120100    2058            lcall   _strcmp
08AC E582      2059            mov     a,dpl
08AE 8583F0    2060            mov     b,dph
08B1 45F0      2061            orl     a,b
08B3 6001      2062            jz      L023127?
08B5 020100    2063            ljmp    L023054?
08B8           2064   L023127?:
08B8           2065   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:603: EraseSector();
08B8 120100    2066            lcall   _EraseSector
08BB           2067   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:604: sends("Flash erased\n");
08BB 90A868    2068            mov     dptr,#__str_14
08BE 75F080    2069            mov     b,#0x80
08C1 120100    2070            lcall   _sends
08C4 020100    2071            ljmp    L023054?
08C7           2072   L023042?:
08C7           2073   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:607: else if(EQ(buff, "S")||EQ(buff, "s"))
08C7 7500A8    2074            mov     _strcmp_PARM_2,#__str_15
08CA 7501A8    2075            mov     (_strcmp_PARM_2 + 1),#(__str_15 >> 8)
08CD 750280    2076            mov     (_strcmp_PARM_2 + 2),#0x80
08D0 901990    2077            mov     dptr,#_buff
08D3 75F040    2078            mov     b,#0x40
08D6 120100    2079            lcall   _strcmp
08D9 E582      2080            mov     a,dpl
08DB 8583F0    2081            mov     b,dph
08DE 45F0      2082            orl     a,b
08E0 6001      2083            jz      L023037?
08E2 750028    2084            mov     _strcmp_PARM_2,#__str_16
08E5 7501A9    2085            mov     (_strcmp_PARM_2 + 1),#(__str_16 >> 8)
08E8 750280    2086            mov     (_strcmp_PARM_2 + 2),#0x80
08EB 901990    2087            mov     dptr,#_buff
08EE 75F040    2088            mov     b,#0x40
08F1 120100    2089            lcall   _strcmp
08F4 E582      2090            mov     a,dpl
08F6 8583F0    2091            mov     b,dph
08F9 45F0      2092            orl     a,b
08FB 7001      2093            jnz     L023038?
08FD           2094   L023037?:
08FD           2095   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:609: sends("Address: ");
08FD 90A2A8    2096            mov     dptr,#__str_5
0900 75F080    2097            mov     b,#0x80
0903 120100    2098            lcall   _sends
0906           2099   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:610: gets(buff);
0906 901990    2100            mov     dptr,#_buff
0909 75F040    2101            mov     b,#0x40
090C 120100    2102            lcall   _gets
090F           2103   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:611: i=str2hex(buff);
090F 901990    2104            mov     dptr,#_buff
0912 75F040    2105            mov     b,#0x40
0915 120100    2106            lcall   _str2hex
0918 858230    2107            mov     _main_i_1_129,dpl
091B 858331    2108            mov     (_main_i_1_129 + 1),dph
091E           2109   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:612: sends("String: ");
091E 90A9A8    2110            mov     dptr,#__str_17
0921 75F080    2111            mov     b,#0x80
0924 120100    2112            lcall   _sends
0927           2113   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:613: gets(buff);
0927 901990    2114            mov     dptr,#_buff
092A 75F040    2115            mov     b,#0x40
092D 120100    2116            lcall   _gets
0930           2117   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:614: for(j=0; buff[j]!=0; j++)
0930 AA30      2118            mov     r2,_main_i_1_129
0932 AB31      2119            mov     r3,(_main_i_1_129 + 1)
0934 7C00      2120            mov     r4,#0x00
0936 7D00      2121            mov     r5,#0x00
0938           2122   L023060?:
0938 EC        2123            mov     a,r4
0939 2490      2124            add     a,#_buff
093B F8        2125            mov     r0,a
093C 8606      2126            mov     ar6,@r0
093E BE0028    2127            cjne    r6,#0x00,L023130?
0941 020100    2128            ljmp    L023054?
0944           2129   L023130?:
0944           2130   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:616: FlashByte(i++, buff[j]);       
0944 8A82      2131            mov     dpl,r2
0946 8B83      2132            mov     dph,r3
0948 0A        2133            inc     r2
0949 BA0068    2134            cjne    r2,#0x00,L023131?
094C 0B        2135            inc     r3
094D           2136   L023131?:
094D 8E50      2137            mov     _FlashByte_PARM_2,r6
094F C002      2138            push    ar2
0951 C003      2139            push    ar3
0953 C004      2140            push    ar4
0955 C005      2141            push    ar5
0957 120100    2142            lcall   _FlashByte
095A D005      2143            pop     ar5
095C D004      2144            pop     ar4
095E D003      2145            pop     ar3
0960 D002      2146            pop     ar2
0962           2147   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:614: for(j=0; buff[j]!=0; j++)
0962 0C        2148            inc     r4
0963 BC00E8    2149            cjne    r4,#0x00,L023060?
0966 0D        2150            inc     r5
0967 8001      2151            sjmp    L023060?
0969           2152   L023038?:
0969           2153   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:619: else if(EQ(buff, "T")||EQ(buff, "t"))
0969 7500A8    2154            mov     _strcmp_PARM_2,#__str_18
096C 7501AA    2155            mov     (_strcmp_PARM_2 + 1),#(__str_18 >> 8)
096F 750280    2156            mov     (_strcmp_PARM_2 + 2),#0x80
0972 901990    2157            mov     dptr,#_buff
0975 75F040    2158            mov     b,#0x40
0978 120100    2159            lcall   _strcmp
097B E582      2160            mov     a,dpl
097D 8583F0    2161            mov     b,dph
0980 45F0      2162            orl     a,b
0982 6001      2163            jz      L023098?
0984 750028    2164            mov     _strcmp_PARM_2,#__str_19
0987 7501AB    2165            mov     (_strcmp_PARM_2 + 1),#(__str_19 >> 8)
098A 750280    2166            mov     (_strcmp_PARM_2 + 2),#0x80
098D 901990    2167            mov     dptr,#_buff
0990 75F040    2168            mov     b,#0x40
0993 120100    2169            lcall   _strcmp
0996 E582      2170            mov     a,dpl
0998 8583F0    2171            mov     b,dph
099B 45F0      2172            orl     a,b
099D 7001      2173            jnz     L023034?
099F           2174   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:621: for(j=0; j<(16*6); j++)
099F           2175   L023098?:
099F 7A00      2176            mov     r2,#0x00
09A1 7B00      2177            mov     r3,#0x00
09A3           2178   L023064?:
09A3 C3        2179            clr     c
09A4 EA        2180            mov     a,r2
09A5 9460      2181            subb    a,#0x60
09A7 EB        2182            mov     a,r3
09A8 9400      2183            subb    a,#0x00
09AA 5001      2184            jnc     L023067?
09AC           2185   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:623: FlashByte(j, counter_prog[j]);         
09AC EA        2186            mov     a,r2
09AD 2450      2187            add     a,#_counter_prog
09AF F582      2188            mov     dpl,a
09B1 EB        2189            mov     a,r3
09B2 3413      2190            addc    a,#(_counter_prog >> 8)
09B4 F583      2191            mov     dph,a
09B6 E4        2192            clr     a
09B7 93        2193            movc    a,@a+dptr
09B8 F550      2194            mov     _FlashByte_PARM_2,a
09BA 8A82      2195            mov     dpl,r2
09BC 8B83      2196            mov     dph,r3
09BE C002      2197            push    ar2
09C0 C003      2198            push    ar3
09C2 120100    2199            lcall   _FlashByte
09C5 D003      2200            pop     ar3
09C7 D002      2201            pop     ar2
09C9           2202   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:621: for(j=0; j<(16*6); j++)
09C9 0A        2203            inc     r2
09CA BA00A8    2204            cjne    r2,#0x00,L023064?
09CD 0B        2205            inc     r3
09CE 8001      2206            sjmp    L023064?
09D0           2207   L023067?:
09D0           2208   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:625: sends("Test program was flashed\n");
09D0 90AC28    2209            mov     dptr,#__str_20
09D3 75F080    2210            mov     b,#0x80
09D6 120100    2211            lcall   _sends
09D9 020100    2212            ljmp    L023054?
09DC           2213   L023034?:
09DC           2214   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:629: sends("What?\n");
09DC 90AC68    2215            mov     dptr,#__str_21
09DF 75F080    2216            mov     b,#0x80
09E2 120100    2217            lcall   _sends
09E5 020100    2218            ljmp    L023054?
09E8           2219   ;------------------------------------------------------------
09E8           2220   ;Allocation info for local variables in function 'dummy_switch'
09E8           2221   ;------------------------------------------------------------
09E8           2222   ;------------------------------------------------------------
09E8           2223   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:634: void dummy_switch(void) __naked
09E8           2224   ;        -----------------------------------------
09E8           2225   ;         function dummy_switch
09E8           2226   ;        -----------------------------------------
09E8           2227   _dummy_switch:
09E8           2228   ;        naked function: no prologue.
09E8           2229   ;        C:\Source\DE2_8052b\Boot\DE2_Boot.c:646: _endasm;
09E8           2230            
FFE0           2231              CSEG at 0xFFE0
FFE0 75C300    2232              mov _XRAMUSEDAS, #0x00 ; 32k RAM accessed as code
FFE3 00        2233              nop
FFE4 22        2234              ret
FFE5           2235            
FFE8           2236              CSEG at 0xffE8
FFE8 75C301    2237              mov _XRAMUSEDAS, #0x01 ; 32k RAM accessed as xdata
FFEB 00        2238              nop
FFEC 22        2239              ret
FFED           2240             
FFED           2241   ;        naked function: no epilogue.
0000           2242            rseg R_CSEG
0000           2243   
0000           2244            rseg R_XINIT
0000           2245   
0000           2246            rseg R_CONST
0000           2247   _counter_prog:
0000 02        2248            db 0x02         ; 2
0001 00        2249            db 0x00         ; 0
0002 10        2250            db 0x10         ; 16
0003 7A        2251            db 0x7a         ; 122
0004 3B        2252            db 0x3b         ; 59
0005 79        2253            db 0x79         ; 121
0006 FA        2254            db 0xfa         ; 250
0007 78        2255            db 0x78         ; 120
0008 FA        2256            db 0xfa         ; 250
0009 D8        2257            db 0xd8         ; 216
000A FE        2258            db 0xfe         ; 254
000B D9        2259            db 0xd9         ; 217
000C FA        2260            db 0xfa         ; 250
000D DA        2261            db 0xda         ; 218
000E F6        2262            db 0xf6         ; 246
000F 22        2263            db 0x22         ; 34
0010 75        2264            db 0x75         ; 117
0011 81        2265            db 0x81         ; 129
0012 7F        2266            db 0x7f         ; 127
0013 7B        2267            db 0x7b         ; 123
0014 00        2268            db 0x00         ; 0
0015 7C        2269            db 0x7c         ; 124
0016 00        2270            db 0x00         ; 0
0017 EC        2271            db 0xec         ; 236
0018 54        2272            db 0x54         ; 84
0019 0F        2273            db 0x0f         ; 15
001A 90        2274            db 0x90         ; 144
001B 00        2275            db 0x00         ; 0
001C 4C        2276            db 0x4c         ; 76
001D 93        2277            db 0x93         ; 147
001E F5        2278            db 0xf5         ; 245
001F 91        2279            db 0x91         ; 145
0020 EC        2280            db 0xec         ; 236
0021 C4        2281            db 0xc4         ; 196
0022 54        2282            db 0x54         ; 84
0023 0F        2283            db 0x0f         ; 15
0024 90        2284            db 0x90         ; 144
0025 00        2285            db 0x00         ; 0
0026 4C        2286            db 0x4c         ; 76
0027 93        2287            db 0x93         ; 147
0028 F5        2288            db 0xf5         ; 245
0029 92        2289            db 0x92         ; 146
002A EB        2290            db 0xeb         ; 235
002B 54        2291            db 0x54         ; 84
002C 0F        2292            db 0x0f         ; 15
002D 90        2293            db 0x90         ; 144
002E 00        2294            db 0x00         ; 0
002F 4C        2295            db 0x4c         ; 76
0030 93        2296            db 0x93         ; 147
0031 F5        2297            db 0xf5         ; 245
0032 93        2298            db 0x93         ; 147
0033 EB        2299            db 0xeb         ; 235
0034 C4        2300            db 0xc4         ; 196
0035 54        2301            db 0x54         ; 84
0036 0F        2302            db 0x0f         ; 15
0037 90        2303            db 0x90         ; 144
0038 00        2304            db 0x00         ; 0
0039 4C        2305            db 0x4c         ; 76
003A 93        2306            db 0x93         ; 147
003B F5        2307            db 0xf5         ; 245
003C 94        2308            db 0x94         ; 148
003D 12        2309            db 0x12         ; 18
003E 00        2310            db 0x00         ; 0
003F 03        2311            db 0x03         ; 3
0040 EC        2312            db 0xec         ; 236
0041 24        2313            db 0x24         ; 36
0042 01        2314            db 0x01         ; 1
0043 D4        2315            db 0xd4         ; 212
0044 FC        2316            db 0xfc         ; 252
0045 EB        2317            db 0xeb         ; 235
0046 34        2318            db 0x34         ; 52
0047 00        2319            db 0x00         ; 0
0048 D4        2320            db 0xd4         ; 212
0049 FB        2321            db 0xfb         ; 251
004A 80        2322            db 0x80         ; 128
004B CB        2323            db 0xcb         ; 203
004C C0        2324            db 0xc0         ; 192
004D F9        2325            db 0xf9         ; 249
004E A4        2326            db 0xa4         ; 164
004F B0        2327            db 0xb0         ; 176
0050 99        2328            db 0x99         ; 153
0051 92        2329            db 0x92         ; 146
0052 82        2330            db 0x82         ; 130
0053 F8        2331            db 0xf8         ; 248
0054 80        2332            db 0x80         ; 128
0055 90        2333            db 0x90         ; 144
0056 88        2334            db 0x88         ; 136
0057 83        2335            db 0x83         ; 131
0058 C6        2336            db 0xc6         ; 198
0059 A1        2337            db 0xa1         ; 161
005A 86        2338            db 0x86         ; 134
005B 8E        2339            db 0x8e         ; 142
005C 00        2340            db 0x00         ; 0
005D 00        2341            db 0x00         ; 0
005E 00        2342            db 0x00         ; 0
005F 00        2343            db 0x00         ; 0
0060           2344   _hexval:
0060 30313233  2345            db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0070 00        2346            db 0x00
0071           2347   __str_0:
0071 444531    2348            db 'DE1'
0074 00        2349            db 0x00
0075           2350   _seven_seg:
0075 C0        2351            db 0xc0         ; 192
0076 F9        2352            db 0xf9         ; 249
0077 A4        2353            db 0xa4         ; 164
0078 B0        2354            db 0xb0         ; 176
0079 99        2355            db 0x99         ; 153
007A 92        2356            db 0x92         ; 146
007B 82        2357            db 0x82         ; 130
007C F8        2358            db 0xf8         ; 248
007D 80        2359            db 0x80         ; 128
007E 90        2360            db 0x90         ; 144
007F 88        2361            db 0x88         ; 136
0080 83        2362            db 0x83         ; 131
0081 C6        2363            db 0xc6         ; 198
0082 A1        2364            db 0xa1         ; 161
0083 86        2365            db 0x86         ; 134
0084 8E        2366            db 0x8e         ; 142
0085           2367   __str_1:
0085 0A        2368            db 0x0A
0086 52656164  2369            db 'Ready for commands (Dump, Program, Erase, Strin, Testcode)'
     7920666F
     7220636F
     6D6D616E
     64732028
     44756D70
     2C205072
     6F677261
     6D2C2045
     72617365
     2C205374
     72696E2C
     20546573
     74636F64
     6529
00C0 0A        2370            db 0x0A
00C1 00        2371            db 0x00
00C2           2372   __str_2:
00C2 3E        2373            db '>'
00C3 00        2374            db 0x00
00C4           2375   __str_3:
00C4 44        2376            db 'D'
00C5 00        2377            db 0x00
00C6           2378   __str_4:
00C6 64        2379            db 'd'
00C7 00        2380            db 0x00
00C8           2381   __str_5:
00C8 41646472  2382            db 'Address: '
     6573733A
     20
00D1 00        2383            db 0x00
00D2           2384   __str_6:
00D2 2020      2385            db '  '
00D4 00        2386            db 0x00
00D5           2387   __str_7:
00D5 50        2388            db 'P'
00D6 00        2389            db 0x00
00D7           2390   __str_8:
00D7 70        2391            db 'p'
00D8 00        2392            db 0x00
00D9           2393   __str_9:
00D9 44617461  2394            db 'Data: '
     3A20
00DF 00        2395            db 0x00
00E0           2396   __str_10:
00E0 45        2397            db 'E'
00E1 00        2398            db 0x00
00E2           2399   __str_11:
00E2 65        2400            db 'e'
00E3 00        2401            db 0x00
00E4           2402   __str_12:
00E4 53686F75  2403            db 'Should erase Flash memory? (y/n)'
     6C642065
     72617365
     20466C61
     7368206D
     656D6F72
     793F2028
     792F6E29
0104 00        2404            db 0x00
0105           2405   __str_13:
0105 79        2406            db 'y'
0106 00        2407            db 0x00
0107           2408   __str_14:
0107 466C6173  2409            db 'Flash erased'
     68206572
     61736564
0113 0A        2410            db 0x0A
0114 00        2411            db 0x00
0115           2412   __str_15:
0115 53        2413            db 'S'
0116 00        2414            db 0x00
0117           2415   __str_16:
0117 73        2416            db 's'
0118 00        2417            db 0x00
0119           2418   __str_17:
0119 53747269  2419            db 'String: '
     6E673A20
0121 00        2420            db 0x00
0122           2421   __str_18:
0122 54        2422            db 'T'
0123 00        2423            db 0x00
0124           2424   __str_19:
0124 74        2425            db 't'
0125 00        2426            db 0x00
0126           2427   __str_20:
0126 54657374  2428            db 'Test program was flashed'
     2070726F
     6772616D
     20776173
     20666C61
     73686564
013E 0A        2429            db 0x0A
013F 00        2430            db 0x00
0140           2431   __str_21:
0140 57686174  2432            db 'What?'
     3F
0145 0A        2433            db 0x0A
0146 00        2434            db 0x00
0147           2435   
FFED           2436            CSEG
FFED           2437   
FFED           2438   end
